# Copyright 2019 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/chromeos/ui_mode.gni")
import("//build/config/features.gni")
import(
    "//chrome/browser/resources/chromeos/accessibility/tools/run_jsbundler.gni")
import("//chrome/test/base/ash/js2gtest.gni")
import("//extensions/buildflags/buildflags.gni")
import("//testing/test.gni")
import("//tools/typescript/ts_library.gni")

assert(is_chromeos_ash)

declare_args() {
  include_mediapipe_task_vision_files_for_facegaze = false
}

group("build") {
  deps = [ ":copied_files" ]
}

accessibility_common_dir =
    "$root_out_dir/resources/chromeos/accessibility/accessibility_common"

# Directory where typescript build will occur.
ts_build_staging_dir = "$target_gen_dir/ts_build_staging"

# Directories for generated third_party libraries.
third_party_stage_dir = "$ts_build_staging_dir/third_party"
mediapipe_task_vision_dir = "mediapipe/task_vision"
mediapipe_availability_dir = "mediapipe/availability"

tsc_out_dir = "$target_gen_dir/tsc"

# Location of common typescript output.
common_tsc_dir =
    "$root_gen_dir/chrome/browser/resources/chromeos/accessibility/common/tsc"

misc_sources = [
  "background.html",
  "dictation/earcons/audio_end.wav",
  "dictation/earcons/audio_initiate.wav",
  "dictation/earcons/null_selection.wav",
  "facegaze/camera_stream.html",
]

js_modules = [
  "dictation/parse/input_text_strategy.js",
  "dictation/parse/parse_strategy.js",
  "dictation/parse/pumpkin/pumpkin_constants.js",
  "dictation/parse/pumpkin_parse_strategy.js",
  "dictation/parse/sandboxed_pumpkin_tagger.js",
  "dictation/parse/simple_parse_strategy.js",
  "dictation/parse/speech_parser.js",
]

# TS files to build.
ts_modules = [
  "accessibility_common_loader.ts",
  "autoclick/autoclick.ts",
  "dictation/context_checker.ts",
  "dictation/dictation.ts",
  "dictation/editing_util.ts",
  "dictation/focus_handler.ts",
  "dictation/input_controller.ts",
  "dictation/locale_info.ts",
  "dictation/metrics_utils.ts",
  "dictation/ui_controller.ts",
  "dictation/macros/delete_prev_sent_macro.ts",
  "dictation/macros/input_text_view_macro.ts",
  "dictation/macros/list_commands_macro.ts",
  "dictation/macros/macro.ts",
  "dictation/macros/macro_names.ts",
  "dictation/macros/nav_sent_macro.ts",
  "dictation/macros/repeat_macro.ts",
  "dictation/macros/repeatable_key_press_macro.ts",
  "dictation/macros/smart_delete_phrase_macro.ts",
  "dictation/macros/smart_insert_before_macro.ts",
  "dictation/macros/smart_replace_phrase_macro.ts",
  "dictation/macros/smart_select_between_macro.ts",
  "dictation/macros/stop_listening_macro.ts",
  "facegaze/facegaze.ts",
  "facegaze/gesture_detector.ts",
  "facegaze/mouse_controller.ts",
  "magnifier/magnifier.ts",
]

if (include_mediapipe_task_vision_files_for_facegaze) {
  ts_modules += [ "facegaze/camera_stream.ts" ]
}

ts_definitions = [
  "../definitions/accessibility_features_mv2.d.ts",
  "../definitions/accessibility_private_mv2.d.ts",
  "../definitions/audio.d.ts",
  "../definitions/automation.d.ts",
  "../definitions/command_line_private.d.ts",
  "../definitions/extensions.d.ts",
  "../definitions/extension_types.d.ts",
  "../definitions/input_ime.d.ts",
  "../definitions/input_method_private.d.ts",
  "../definitions/language_settings_private.d.ts",
  "../definitions/metrics_private.d.ts",
  "../definitions/runtime.d.ts",
  "../definitions/settings_private_mv2.d.ts",
  "../definitions/speech_recognition_private.d.ts",
  "../definitions/tabs.d.ts",
  "../definitions/settings_private_mv2.d.ts",
  "../definitions/windows.d.ts",
  "//tools/typescript/definitions/i18n.d.ts",
]

# Generated files required for ts_build.
generated_ts_definitions =
    [ "$third_party_stage_dir/$mediapipe_task_vision_dir/vision.d.ts" ]
generated_ts_modules =
    [ "third_party/$mediapipe_availability_dir/mediapipe_availability.ts" ]
if (include_mediapipe_task_vision_files_for_facegaze) {
  generated_ts_modules +=
      [ "third_party/$mediapipe_task_vision_dir/task_vision.js" ]
}

ts_library("ts_build") {
  root_dir = "$ts_build_staging_dir"
  out_dir = tsc_out_dir

  composite = true

  deps = [ "../common:ts_build" ]

  # Targets that need to run before running the TS build.
  extra_deps = [
    # Mediapipe deps.
    ":extract_mediapipe_task_vision_files",
    ":mediapipe_availability",

    #copied files
    ":stage_ts_build",
  ]

  path_mappings =
      [ "/common/*|" + rebase_path("$common_tsc_dir/*", target_gen_dir) ]

  definitions = ts_definitions + generated_ts_definitions

  in_files = generated_ts_modules + js_modules + ts_modules

  tsconfig_base = "../tsconfig.base.json"
}

# Instead of setting up copy targets, use a script to copy all files.
run_jsbundler("copied_files") {
  mode = "copy"
  dest_dir = accessibility_common_dir
  clear_dest_dirs = [
    "autoclick",
    "dictation",
    "facegaze",
    "magnifier",
  ]
  deps = [
    ":ts_build",
    "../common:copied_files",
  ]

  sources =
      misc_sources + filter_include(get_target_outputs(":ts_build"), [ "*.js" ])

  rewrite_rules = [
    rebase_path("$tsc_out_dir", root_build_dir) + ":",
    rebase_path(".", root_build_dir) + ":",
    rebase_path(closure_library_dir, root_build_dir) + ":closure",
  ]

  if (include_mediapipe_task_vision_files_for_facegaze) {
    # Include generated mediapipe files that are required for facegaze.
    sources += [
      "$third_party_stage_dir/$mediapipe_task_vision_dir/face_landmarker.task",
      "$third_party_stage_dir/$mediapipe_task_vision_dir/vision_wasm_internal.js",
      "$third_party_stage_dir/$mediapipe_task_vision_dir/vision_wasm_internal.wasm",
    ]

    deps += [ ":extract_mediapipe_task_vision_files" ]
    rewrite_rules +=
        [ rebase_path("$third_party_stage_dir/$mediapipe_task_vision_dir",
                      root_build_dir) + ":" ]
  }
}

# Copy all JS and TS sources to a staging folder. All generated TS/JS files
# will also be copied into this folder, which will allow us to support a TS
# build that uses both checked-in and generated files.
copy("stage_ts_build") {
  sources = js_modules + ts_modules
  outputs = [ "$ts_build_staging_dir/{{source_target_relative}}" ]
}

source_set("browser_tests") {
  testonly = true
  assert(enable_extensions)

  deps = [
    ":accessibility_common_extjs_tests",
    ":pumpkin_test_files",
  ]

  if (include_mediapipe_task_vision_files_for_facegaze) {
    deps += [ ":extract_mediapipe_task_vision_files" ]
  }

  data = [
    "$root_out_dir/chrome_100_percent.pak",
    "$root_out_dir/chrome_200_percent.pak",
    "$root_out_dir/locales/en-US.pak",
    "$root_out_dir/resources.pak",
    "$root_out_dir/resources/chromeos/accessibility/accessibility_common/",
    "$root_out_dir/test_data/chrome/browser/resources/chromeos/accessibility/accessibility_common/",

    # The test uses data from the original location, not the copied one.
    "//chrome/browser/resources/chromeos/accessibility/accessibility_common/",
    "//chrome/browser/resources/chromeos/accessibility/common/",
  ]
  data += js2gtest_js_libraries
}

js2gtest("accessibility_common_extjs_tests") {
  test_type = "extension"
  sources = [
    "accessibility_common_test.js",
    "autoclick/autoclick_test.js",
    "dictation/dictation_test.js",
    "dictation/dictation_test_base.js",
    "dictation/dictation_ui_test.js",
    "dictation/editing_util_test.js",
    "dictation/focus_handler_test.js",
    "dictation/locale_info_test.js",
    "dictation/macros/dictation_macros_test.js",
    "dictation/parse/dictation_parse_test.js",
    "dictation/parse/dictation_pumpkin_parse_test.js",
    "facegaze/facegaze_test.js",
    "facegaze/facegaze_test_base.js",
    "magnifier/magnifier_test.js",
  ]
  if (include_mediapipe_task_vision_files_for_facegaze) {
    sources += [ "facegaze/facegaze_mediapipe_test.js" ]
  }

  gen_include_files = [
    "../common/testing/accessibility_test_base.js",
    "../common/testing/callback_helper.js",
    "../common/testing/common_e2e_test_base.js",
    "../common/testing/e2e_test_base.js",
    "../common/testing/mock_accessibility_private.js",
    "../common/testing/mock_audio.js",
    "../common/testing/mock_input_ime.js",
    "../common/testing/mock_input_method_private.js",
    "../common/testing/mock_language_settings_private.js",
    "../common/testing/mock_speech_recognition_private.js",
  ]

  # The test base classes generate C++ code with these deps.
  deps = [
    ":ts_build",
    "//ash",
    "//ash/keyboard/ui",
    "//base",
    "//chrome/browser/ash",
    "//chrome/common",
  ]
  defines = [ "HAS_OUT_OF_PROC_TEST_RUNNER" ]
}

action("pumpkin_test_files") {
  testonly = true

  pumpkin_output_dir = "$accessibility_common_dir/third_party/pumpkin"
  script = "third_party/pumpkin/unpack_pumpkin.py"
  sources = [ "third_party/pumpkin/pumpkin-3.0.tar.xz" ]
  files_to_extract = [
    "$pumpkin_output_dir/js_pumpkin_tagger_bin.js",
    "$pumpkin_output_dir/tagger_wasm_main.js",
    "$pumpkin_output_dir/tagger_wasm_main.wasm",
    "$pumpkin_output_dir/en_us/action_config.binarypb",
    "$pumpkin_output_dir/en_us/pumpkin_config.binarypb",
    "$pumpkin_output_dir/fr_fr/action_config.binarypb",
    "$pumpkin_output_dir/fr_fr/pumpkin_config.binarypb",
    "$pumpkin_output_dir/it_it/action_config.binarypb",
    "$pumpkin_output_dir/it_it/pumpkin_config.binarypb",
    "$pumpkin_output_dir/de_de/action_config.binarypb",
    "$pumpkin_output_dir/de_de/pumpkin_config.binarypb",
    "$pumpkin_output_dir/es_es/action_config.binarypb",
    "$pumpkin_output_dir/es_es/pumpkin_config.binarypb",
  ]
  args = [
    "--dest-dir=resources/chromeos/accessibility/accessibility_common/third_party/pumpkin",
    rebase_path("third_party/pumpkin/pumpkin-3.0.tar.xz", root_build_dir),
    string_join(",", files_to_extract),
    pumpkin_output_dir,
  ]
  outputs = files_to_extract
}

action("extract_mediapipe_task_vision_files") {
  script = "third_party/mediapipe_task_vision/unpack.py"
  sources = [ "third_party/mediapipe_task_vision/mediapipe_task_vision.tar.xz" ]
  out_dir = "$third_party_stage_dir/$mediapipe_task_vision_dir"

  # Always extract vision.d.ts, as it's always needed for type-checking.
  files_to_extract = [ "$out_dir/vision.d.ts" ]
  if (include_mediapipe_task_vision_files_for_facegaze) {
    # Only extract the remaining files if we're actually allowed to use
    # mediapipe.
    files_to_extract += [
      "$out_dir/face_landmarker.task",
      "$out_dir/task_vision.js",
      "$out_dir/vision_wasm_internal.js",
      "$out_dir/vision_wasm_internal.wasm",
    ]
  }

  mediapipe_task_vision_dir_rebased =
      rebase_path("$third_party_stage_dir/$mediapipe_task_vision_dir",
                  root_build_dir)

  args = [
    "--dest-dir=$mediapipe_task_vision_dir_rebased",
    rebase_path(
        "third_party/mediapipe_task_vision/mediapipe_task_vision.tar.xz",
        root_build_dir),
    string_join(",", files_to_extract),
  ]
  outputs = files_to_extract
}

copy("mediapipe_availability") {
  if (include_mediapipe_task_vision_files_for_facegaze) {
    sources = [ "facegaze/include_mediapipe.ts" ]
  } else {
    sources = [ "facegaze/exclude_mediapipe.ts" ]
  }

  outputs = [ "$third_party_stage_dir/$mediapipe_availability_dir/mediapipe_availability.ts" ]
}
