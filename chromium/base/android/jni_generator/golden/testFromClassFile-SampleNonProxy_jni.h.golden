// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/example/jni_generator/SampleNonProxy

#ifndef org_chromium_example_jni_generator_SampleNonProxy_JNI
#define org_chromium_example_jni_generator_SampleNonProxy_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_example_jni_1generator_SampleNonProxy[];
const char kClassPath_org_chromium_example_jni_1generator_SampleNonProxy[] =
    "org/chromium/example/jni_generator/SampleNonProxy";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_example_jni_1generator_SampleNonProxy_clazz(nullptr);
#ifndef org_chromium_example_jni_1generator_SampleNonProxy_clazz_defined
#define org_chromium_example_jni_1generator_SampleNonProxy_clazz_defined
inline jclass org_chromium_example_jni_1generator_SampleNonProxy_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_example_jni_1generator_SampleNonProxy,
      &g_org_chromium_example_jni_1generator_SampleNonProxy_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace JNI_SampleNonProxy {


static std::atomic<jmethodID>
    g_org_chromium_example_jni_1generator_SampleNonProxy_nativeFindAll(nullptr);
[[maybe_unused]] static jint Java_SampleNonProxy_nativeFindAll(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& p0);
static jint Java_SampleNonProxy_nativeFindAll(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jstring>& p0) {
  jclass clazz = org_chromium_example_jni_1generator_SampleNonProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_example_jni_1generator_SampleNonProxy_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "nativeFindAll",
          "(Ljava/lang/String;)I",
          &g_org_chromium_example_jni_1generator_SampleNonProxy_nativeFindAll);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_example_jni_1generator_SampleNonProxy_Constructor(nullptr);
[[maybe_unused]] static base::android::ScopedJavaLocalRef<jobject>
    Java_SampleNonProxy_Constructor(JNIEnv* env);
static base::android::ScopedJavaLocalRef<jobject> Java_SampleNonProxy_Constructor(JNIEnv* env) {
  jclass clazz = org_chromium_example_jni_1generator_SampleNonProxy_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_example_jni_1generator_SampleNonProxy_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "()V",
          &g_org_chromium_example_jni_1generator_SampleNonProxy_Constructor);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace JNI_SampleNonProxy

#endif  // org_chromium_example_jni_generator_SampleNonProxy_JNI
