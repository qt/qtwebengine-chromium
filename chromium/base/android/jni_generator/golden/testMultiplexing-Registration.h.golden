// Copyright 2017 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_registration_generator.py
// Please do not change its content.

#ifndef TEMP_DIR_HEADER_
#define TEMP_DIR_HEADER_

#include <jni.h>

#include <iterator>

#include "base/android/jni_generator/jni_generator_helper.h"
#include "base/android/jni_int_wrapper.h"


// Step 1: Forward declarations (classes).


// Step 2: Forward declarations (methods).

JNI_GENERATOR_EXPORT void Java_J_N_MygCV2jQ(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jobject Java_J_N_MHuqnmXT(
    JNIEnv* env,
    jclass jcaller,
    jobject sample);
JNI_GENERATOR_EXPORT jstring Java_J_N_MM5Xkwyy(
    JNIEnv* env,
    jclass jcaller,
    jstring stringToReverse);
JNI_GENERATOR_EXPORT jobjectArray Java_J_N_MAC2QhR9(
    JNIEnv* env,
    jclass jcaller,
    jobjectArray strs);
JNI_GENERATOR_EXPORT jobjectArray Java_J_N_MGhRh4Nd(
    JNIEnv* env,
    jclass jcaller,
    jobjectArray strs);
JNI_GENERATOR_EXPORT jboolean Java_J_N_MW0aEs4h(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jintArray Java_J_N_MlVFI4RX(
    JNIEnv* env,
    jclass jcaller,
    jint zint,
    jintArray ints,
    jlong zlong,
    jlongArray longs,
    jshort zshort,
    jshortArray shorts,
    jchar zchar,
    jcharArray chars,
    jbyte zbyte,
    jbyteArray bytes,
    jdouble zdouble,
    jdoubleArray doubles,
    jfloat zfloat,
    jfloatArray floats,
    jboolean zbool,
    jbooleanArray bools);
JNI_GENERATOR_EXPORT void Java_J_N_MqOnlud7(
    JNIEnv* env,
    jclass jcaller,
    jclass clazz,
    jobjectArray classes,
    jthrowable throwable,
    jobjectArray throwables,
    jstring string,
    jobjectArray strings,
    jobject tStruct,
    jobjectArray structs,
    jobject obj,
    jobjectArray objects);
JNI_GENERATOR_EXPORT jthrowable Java_J_N_MuZc76Vt(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jobjectArray Java_J_N_MAD53J7V(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jclass Java_J_N_M_00024ZgOi4g(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jobjectArray Java_J_N_M_00024hL1577(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jstring Java_J_N_M0k1OjBK(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jobjectArray Java_J_N_Mssfs54E(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jobject Java_J_N_MSzcel_1H(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jobjectArray Java_J_N_MIBrQLK4(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jobject Java_J_N_M_00024hPywjv(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jobjectArray Java_J_N_MPpCU1l5(
    JNIEnv* env,
    jclass jcaller);


JNI_GENERATOR_EXPORT jclass Java_J_N_resolve_1for_1class(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case -461602969360398827:
            return Java_J_N_M_00024ZgOi4g(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1class was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_GENERATOR_EXPORT jobjectArray Java_J_N_resolve_1for_1class_1array(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case -427008638958312484:
            return Java_J_N_M_00024hL1577(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1class_1array was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_GENERATOR_EXPORT jobject Java_J_N_resolve_1for_1object(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case 5419834314509580268:
            return Java_J_N_MSzcel_1H(env, jcaller);
          
          case -426730623629742951:
            return Java_J_N_M_00024hPywjv(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1object was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_GENERATOR_EXPORT jobject Java_J_N_resolve_1for_1object_1O(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num, jobject object_param1) {
        switch (switch_num) {
          
          case 2227777243221232668:
            return Java_J_N_MHuqnmXT(env, jcaller, object_param1);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1object_1O was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_GENERATOR_EXPORT jobjectArray Java_J_N_resolve_1for_1object_1array(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case 2313390248928530514:
            return Java_J_N_MIBrQLK4(env, jcaller);
          
          case 4508266875426191279:
            return Java_J_N_MPpCU1l5(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1object_1array was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_GENERATOR_EXPORT jobjectArray Java_J_N_resolve_1for_1object_1array_1OA(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num, jobjectArray object_array_param1) {
        switch (switch_num) {
          
          case 1879234562834588228:
            return Java_J_N_MGhRh4Nd(env, jcaller, object_array_param1);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1object_1array_1OA was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_GENERATOR_EXPORT jstring Java_J_N_resolve_1for_1string(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case -3292889389021976364:
            return Java_J_N_M0k1OjBK(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1string was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_GENERATOR_EXPORT jstring Java_J_N_resolve_1for_1string_1R(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num, jstring string_param1) {
        switch (switch_num) {
          
          case 3717128594383367634:
            return Java_J_N_MM5Xkwyy(env, jcaller, string_param1);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1string_1R was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_GENERATOR_EXPORT jobjectArray Java_J_N_resolve_1for_1string_1array(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case -5564218335546380707:
            return Java_J_N_Mssfs54E(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1string_1array was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_GENERATOR_EXPORT jobjectArray Java_J_N_resolve_1for_1string_1array_1RA(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num, jobjectArray string_array_param1) {
        switch (switch_num) {
          
          case 12825275381484104:
            return Java_J_N_MAC2QhR9(env, jcaller, string_array_param1);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1string_1array_1RA was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_GENERATOR_EXPORT jthrowable Java_J_N_resolve_1for_1throwable(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case -5073520581764159162:
            return Java_J_N_MuZc76Vt(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1throwable was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_GENERATOR_EXPORT jobjectArray Java_J_N_resolve_1for_1throwable_1array(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case 17582460986153510:
            return Java_J_N_MAD53J7V(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1throwable_1array was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_GENERATOR_EXPORT jboolean Java_J_N_resolve_1for_1boolean(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case 6577090212445038314:
            return Java_J_N_MW0aEs4h(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1boolean was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_GENERATOR_EXPORT jintArray Java_J_N_resolve_1for_1int_1array_1IIAJJASSACCABBADDAFFAZZA(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num, jint int_param1, jintArray int_array_param1, jlong long_param1, jlongArray long_array_param1, jshort short_param1, jshortArray short_array_param1, jchar char_param1, jcharArray char_array_param1, jbyte byte_param1, jbyteArray byte_array_param1, jdouble double_param1, jdoubleArray double_array_param1, jfloat float_param1, jfloatArray float_array_param1, jboolean boolean_param1, jbooleanArray boolean_array_param1) {
        switch (switch_num) {
          
          case -7687282957371512872:
            return Java_J_N_MlVFI4RX(env, jcaller, int_param1, int_array_param1, long_param1, long_array_param1, short_param1, short_array_param1, char_param1, char_array_param1, byte_param1, byte_array_param1, double_param1, double_array_param1, float_param1, float_array_param1, boolean_param1, boolean_array_param1);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1int_1array_1IIAJJASSACCABBADDAFFAZZA was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_GENERATOR_EXPORT void Java_J_N_resolve_1for_1void(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case -3890945313637314700:
            return Java_J_N_MygCV2jQ(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1void was called with an invalid switch number: " << switch_num;
            return;
        }
}
JNI_GENERATOR_EXPORT void Java_J_N_resolve_1for_1void_1LLATTARRAOOAOOA(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num, jclass class_param1, jobjectArray class_array_param1, jthrowable throwable_param1, jobjectArray throwable_array_param1, jstring string_param1, jobjectArray string_array_param1, jobject object_param1, jobjectArray object_array_param1, jobject object_param2, jobjectArray object_array_param2) {
        switch (switch_num) {
          
          case -6275232019293411879:
            return Java_J_N_MqOnlud7(env, jcaller, class_param1, class_array_param1, throwable_param1, throwable_array_param1, string_param1, string_array_param1, object_param1, object_array_param1, object_param2, object_array_param2);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1void_1LLATTARRAOOAOOA was called with an invalid switch number: " << switch_num;
            return;
        }
}

#endif  // TEMP_DIR_HEADER_
