// Copyright 2019 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

{% from 'templates/macros.tmpl' import source_files_for_generated_file %}
{{source_files_for_generated_file(template_file, input_files)}}
// clang-format off

#include "third_party/blink/renderer/core/css/properties/css_property_instances.h"

#include "third_party/blink/renderer/core/css/properties/longhands.h"
#include "third_party/blink/renderer/core/css/properties/longhands/variable.h"
#include "third_party/blink/renderer/core/css/properties/shorthands.h"

namespace blink {

// NOTE: Everything in here must be reinterpret_cast-able
// to CSSUnresolvedProperty! In particular, this means that
// multiple inheritance is forbidden. We enforce this through
// DCHECKs as much as we can; this also checks (compile-time)
// that everything inherits from CSSUnresolvedProperty.
union alignas(kCSSPropertyUnionBytes) CSSPropertyUnion {
  constexpr CSSPropertyUnion() {}  // For kInvalid.
  constexpr CSSPropertyUnion(Variable property)
    : variable_(std::move(property)) {
    DCHECK(reinterpret_cast<const CSSUnresolvedProperty *>(this) ==
        static_cast<const CSSUnresolvedProperty *>(&variable_));
  }

  {% for property in properties %}
  constexpr CSSPropertyUnion(::blink::{{property.namespace}}::{{property.classname}} property)
    : {{property.property_id.lower()}}_(std::move(property)) {
    DCHECK(reinterpret_cast<const CSSUnresolvedProperty *>(this) ==
        static_cast<const CSSUnresolvedProperty *>(&{{property.property_id.lower()}}_));
  }
  {% endfor %}
  {% for property in aliases %}
  constexpr CSSPropertyUnion(::blink::{{property.namespace}}::{{property.classname}} property)
    : {{property.property_id.lower()}}_(std::move(property)) {
    DCHECK(reinterpret_cast<const CSSUnresolvedProperty *>(this) ==
        static_cast<const CSSUnresolvedProperty *>(&{{property.property_id.lower()}}_));
  }
  {% endfor %}

  Variable variable_;
  {% for property in properties %}
  ::blink::{{property.namespace}}::{{property.classname}} {{property.property_id.lower()}}_;
  {% endfor %}
  {% for property in aliases %}
  ::blink::{{property.namespace}}::{{property.classname}} {{property.property_id.lower()}}_;
  {% endfor %}
};
static_assert(sizeof(CSSPropertyUnion) == kCSSPropertyUnionBytes);

const CSSPropertyUnion kProperties[] = {
  {},  // kInvalid.
  Variable(),
  {% for property in properties %}
  ::blink::{{property.namespace}}::{{property.classname}}(),
  {% endfor %}
  {% for property in aliases %}
  ::blink::{{property.namespace}}::{{property.classname}}(),
  {% endfor %}
};

}  // namespace blink
