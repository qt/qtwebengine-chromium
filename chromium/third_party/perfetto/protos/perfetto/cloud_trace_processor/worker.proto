/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package perfetto.protos;

import "protos/perfetto/trace_processor/trace_processor.proto";
import "protos/perfetto/cloud_trace_processor/common.proto";

// Interface for a CloudTraceProcessor "Worker".
//
// Workers are are owned by a |Orchestrator| who assigns groups of traces to
// them (known as a PoolShards) and forwards any requests from end users.
// Workers are reponsible for loading assigned traces with TraceProcessor and
// executing the requests.
service CloudTraceProcessorWorker {
  // Creates a TracePoolShard which will be owned by this worker and returns
  // whether it was successfully created.
  //
  // Orchestrators are responsible for handling groups of traces which the user
  // has requested to be loaded: these are known as TracePools. The orchestrator
  // then breaks these pools into pieces and shards them out to workers, each of
  // which is known as a TracePoolShard.
  //
  // Thus, a TracePoolShard is unique identified by the tuple (worker, pool id).
  rpc TracePoolShardCreate(TracePoolShardCreateArgs)
      returns (TracePoolShardCreateResponse);

  // Associates the provided list of traces to this TracePoolShard and returns
  // a stream with each element indicating the successful load of one trace
  // (which allows monitoring the progress of loads) or a terminal error if the
  // assignment of any trace failed.
  //
  // If this operation completes successfully, any future requests to this pool
  // shard will refer to this set of traces.
  rpc TracePoolShardSetTraces(TracePoolShardSetTracesArgs)
      returns (stream TracePoolShardSetTracesResponse);

  // Executes a SQL query on the specified TracePoolShard and returns a stream
  // with each element being the response for executing the query on the
  // associated trace.
  //
  // Note that each trace can return >1 result due to chunking of protos at the
  // TraceProcessor::QueryResult level.
  rpc TracePoolShardQuery(TracePoolShardQueryArgs)
      returns (stream TracePoolShardQueryResponse);

  // Destroys the TracePoolShard with the specified id.
  //
  // Any future requests to this shard id will return an error. However, the
  // same pool id can be used to create a new shard.
  rpc TracePoolShardDestroy(TracePoolShardDestroyArgs)
      returns (TracePoolShardDestroyResponse);
}

// Request/Response for Worker::TracePoolShardCreate.
message TracePoolShardCreateArgs {
  optional string pool_id = 1;
  optional TracePoolType pool_type = 2;
}
message TracePoolShardCreateResponse {}

// Request/Response for Worker::TracePoolShardSetTraces.
message TracePoolShardSetTracesArgs {
  optional string pool_id = 1;

  // The list of traces which should be associated with this shard. The existing
  // loaded trace list will be diffed against this list. Traces not present in
  // this list and loaded will be unloaded while traces present in this list
  // and unloaded will be loaded.
  repeated string traces = 2;
}
message TracePoolShardSetTracesResponse {
  optional string trace = 1;
}

// Request/Response for Worker::TracePoolShardQuery.
message TracePoolShardQueryArgs {
  optional string pool_id = 1;
  optional string sql_query = 2;
}
message TracePoolShardQueryResponse {
  optional string trace = 1;
  optional QueryResult result = 2;
}

// Request/Response for Worker::TracePoolShardDestroy.
message TracePoolShardDestroyArgs {
  optional string pool_id = 1;
}
message TracePoolShardDestroyResponse {}
