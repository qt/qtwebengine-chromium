/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
var _a;
import { __decorate } from "tslib";
import '../../focus/focus-ring.js';
import '../../ripple/ripple.js';
import { html, LitElement, nothing } from 'lit';
import { property, queryAsync, state } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { requestUpdateOnAriaChange } from '../../aria/delegate.js';
/**
 * A chip component.
 */
export class Chip extends LitElement {
    constructor() {
        super(...arguments);
        this.disabled = false;
        this.label = '';
        this.showPrimaryRipple = false;
        this.getPrimaryRipple = () => {
            this.showPrimaryRipple = true;
            return this.primaryRipple;
        };
    }
    /**
     * Whether or not the primary ripple is disabled (defaults to `disabled`).
     * Some chip actions such as links cannot be disabled.
     */
    get primaryRippleDisabled() {
        return this.disabled;
    }
    render() {
        const primaryRipple = this.showPrimaryRipple ?
            html `<md-ripple ?disabled=${this.primaryRippleDisabled}></md-ripple>` :
            nothing;
        const primaryFocus = html `<md-focus-ring for=${this.primaryFocusFor}></md-focus-ring>`;
        return html `
      <div class="container ${classMap(this.getContainerClasses())}">
        ${this.renderOutline()}
        ${primaryFocus}
        ${primaryRipple}
        ${this.renderPrimaryAction()}
        ${this.renderTrailingAction()}
      </div>
    `;
    }
    getContainerClasses() {
        return {
            disabled: this.disabled,
        };
    }
    renderContent() {
        return html `
      <span class="icon">
        ${this.renderLeadingIcon()}
      </span>
      <span class="label">${this.label}</span>
    `;
    }
    renderTrailingAction() {
        return nothing;
    }
    renderOutline() {
        return html `<span class="outline"></span>`;
    }
    renderLeadingIcon() {
        return html `<slot name="icon"></slot>`;
    }
}
_a = Chip;
(() => {
    requestUpdateOnAriaChange(_a);
})();
__decorate([
    property({ type: Boolean })
], Chip.prototype, "disabled", void 0);
__decorate([
    property()
], Chip.prototype, "label", void 0);
__decorate([
    state()
], Chip.prototype, "showPrimaryRipple", void 0);
__decorate([
    queryAsync('md-ripple')
], Chip.prototype, "primaryRipple", void 0);
//# sourceMappingURL=chip.js.map