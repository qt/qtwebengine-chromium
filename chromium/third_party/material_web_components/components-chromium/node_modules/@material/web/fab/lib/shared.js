/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
var _a;
import { __decorate } from "tslib";
import '../../elevation/elevation.js';
import '../../focus/focus-ring.js';
import '../../ripple/ripple.js';
import { html, LitElement, nothing } from 'lit';
import { property, queryAsync, state } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { when } from 'lit/directives/when.js';
import { requestUpdateOnAriaChange } from '../../aria/delegate.js';
import { ripple } from '../../ripple/directive.js';
// tslint:disable-next-line:enforce-comments-on-exported-symbols
export class SharedFab extends LitElement {
    constructor() {
        super(...arguments);
        /**
         * The size of the FAB.
         *
         * NOTE: Branded FABs cannot be sized to `small`, and Extended FABs do not
         * have different sizes.
         */
        this.size = 'medium';
        /**
         * The text to display on the FAB.
         */
        this.label = '';
        /**
         * Lowers the FAB's elevation.
         */
        this.lowered = false;
        /**
         * Lowers the FAB's elevation and places it into the `lowered` state.
         */
        this.reducedTouchTarget = false;
        this.showRipple = false;
        this.getRipple = () => {
            this.showRipple = true;
            return this.ripple;
        };
        this.renderRipple = () => {
            return html `<md-ripple class="ripple"></md-ripple>`;
        };
    }
    render() {
        // Needed for closure conformance
        const { ariaLabel } = this;
        return html `
      <button
          class="fab ${classMap(this.getRenderClasses())}"
          aria-label=${ariaLabel || nothing}
          ${ripple(this.getRipple)}>
        <md-elevation></md-elevation>
        <md-focus-ring></md-focus-ring>
        ${when(this.showRipple, this.renderRipple)}
        ${this.renderTouchTarget()}
        ${this.renderIcon()}
        ${this.renderLabel()}
      </button>`;
    }
    getRenderClasses() {
        const isExtended = !!this.label;
        return {
            'lowered': this.lowered,
            'small': this.size === 'small' && !isExtended,
            'large': this.size === 'large' && !isExtended,
            'extended': isExtended,
        };
    }
    renderTouchTarget() {
        return this.reducedTouchTarget ? html `` :
            html `<div class="touch-target"></div>`;
    }
    renderLabel() {
        return this.label ? html `<span class="label">${this.label}</span>` : '';
    }
    renderIcon() {
        return html `<span class="icon">
        <slot name="icon"></slot>
      </span>`;
    }
}
_a = SharedFab;
(() => {
    requestUpdateOnAriaChange(_a);
})();
SharedFab.shadowRootOptions = {
    mode: 'open',
    delegatesFocus: true,
};
__decorate([
    property()
], SharedFab.prototype, "size", void 0);
__decorate([
    property()
], SharedFab.prototype, "label", void 0);
__decorate([
    property({ type: Boolean })
], SharedFab.prototype, "lowered", void 0);
__decorate([
    property({ type: Boolean })
], SharedFab.prototype, "reducedTouchTarget", void 0);
__decorate([
    state()
], SharedFab.prototype, "showRipple", void 0);
__decorate([
    queryAsync('md-ripple')
], SharedFab.prototype, "ripple", void 0);
//# sourceMappingURL=shared.js.map