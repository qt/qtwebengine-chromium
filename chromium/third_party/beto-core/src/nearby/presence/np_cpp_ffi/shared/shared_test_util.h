// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef NEARBY_PRESENCE_NP_CPP_FFI_TESTS_SHARED_TEST_UTILS_H_
#define NEARBY_PRESENCE_NP_CPP_FFI_TESTS_SHARED_TEST_UTILS_H_

#include "nearby_protocol.h"

// Plaintext advertisement bytes
constexpr std::array<uint8_t, 2> V0AdvEmptyBytes{0x00, 0x03};
constexpr std::array<uint8_t, 2> V1AdvEmptyBytes{0x00, 0x20};
constexpr std::array<uint8_t, 4> V0AdvPlaintextBytes{0x00, 0x03, 0x15, 0x03};
constexpr std::array<uint8_t, 7> V0AdvPlaintextMultiDeBytes{
    0x00, 0x03, 0x15, 0x05, 0x26, 0x00, 0x46,
};
constexpr std::array<uint8_t, 5> V1AdvPlaintextBytes{0x20, 0x03, 0x03, 0x15,
                                                     0x03};

// V0 encrypted advertisement data - ripped out of np_adv/tests/examples_v0.rs
constexpr std::array<uint8_t, 20> V0AdvEncryptedBytes{
    0x00, 0x21, 0x22, 0x22, 0x85, 0xBF, 0xA8, 0x83, 0x58, 0x7C,
    0x50, 0xCF, 0x98, 0x38, 0xA7, 0x8A, 0xC0, 0x1C, 0x96, 0xF9,
};
inline std::vector<uint8_t> V0AdvEncryptedMetadata = {
    0x26, 0xC5, 0xEA, 0xD4, 0xED, 0x58, 0xF8, 0xFC, 0xE8, 0xF4, 0xAB, 0x0C,
    0x93, 0x2B, 0x75, 0xAA, 0x74, 0x39, 0x67, 0xDB, 0x1E, 0xF2, 0x33, 0xB5,
    0x43, 0xCC, 0x94, 0xAA, 0xA3, 0xBB, 0xB9, 0x4C, 0xBF, 0x57, 0x77, 0xD0,
    0x43, 0x0C, 0x7F, 0xF7, 0x36, 0x03, 0x29, 0xE0, 0x57, 0xBA, 0x97, 0x7F,
    0xF2, 0xD1, 0x51, 0xDB, 0xC9, 0x01, 0x47, 0xE7, 0x48, 0x36,
};
inline std::string ExpectedV0DecryptedMetadata(
    R"({"name":"Alice","email":"alice@gmail.com"})");
constexpr std::array<uint8_t, 32> V0AdvKeySeed = {
    0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
    0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
    0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
};
constexpr std::array<uint8_t, 32> V0AdvLegacyMetadataKeyHmac = {
    0x88, 0x33, 0xDE, 0xD5, 0x4D, 0x00, 0x92, 0xE8, 0x80, 0x70, 0xD5,
    0x1F, 0x18, 0xEC, 0x22, 0x45, 0x75, 0x7C, 0x24, 0xDF, 0xE3, 0x8C,
    0xB2, 0xDE, 0x77, 0xB6, 0x78, 0x85, 0xFC, 0xA5, 0x67, 0x4D,
};

// V1 encrypted advertisement data - ripped out of np_adv/tests/examples_v1.rs
constexpr std::array<uint8_t, 105> V1AdvEncryptedBytes{
    0x20, 0x67, 0x91, 0x10, 0x08, 0xAD, 0x69, 0x46, 0x04, 0x5D, 0xAE, 0x6D,
    0xB7, 0xF7, 0x5C, 0xD3, 0xB8, 0xAC, 0xF0, 0xBF, 0x75, 0x90, 0x01, 0xBE,
    0x73, 0x33, 0xA4, 0x76, 0x84, 0x4A, 0x09, 0x0F, 0x2B, 0x99, 0x47, 0xDF,
    0x8B, 0x46, 0xCA, 0x16, 0xCE, 0x13, 0xB5, 0x6E, 0x53, 0xAE, 0x28, 0x56,
    0x44, 0x0E, 0xA6, 0x8D, 0xEB, 0xA1, 0x11, 0xAF, 0x4E, 0x1B, 0xE0, 0x8E,
    0xF5, 0xBA, 0x90, 0x4F, 0x2E, 0x94, 0xFC, 0xDE, 0xA6, 0x7F, 0x5D, 0xC8,
    0x37, 0xB7, 0xEF, 0xCA, 0xAC, 0x8B, 0x9F, 0x1B, 0xD4, 0xC6, 0x11, 0x85,
    0xD3, 0x67, 0x39, 0x32, 0xD1, 0x82, 0xCA, 0x4E, 0xB9, 0x46, 0x03, 0x83,
    0x68, 0x56, 0x0B, 0xCC, 0xFD, 0x7A, 0x2A, 0xBE, 0x07,
};
constexpr std::array<uint8_t, 32> V1AdvKeySeed = {
    0x31, 0x43, 0x63, 0x1E, 0xCA, 0xE8, 0x97, 0x4B, 0x96, 0x50, 0xCC,
    0x1C, 0x48, 0x25, 0x0E, 0x81, 0x58, 0x06, 0x81, 0x51, 0xF9, 0xEB,
    0x25, 0x23, 0x03, 0xD4, 0x97, 0x6D, 0x95, 0x19, 0x91, 0x39,
};
constexpr std::array<uint8_t, 32> V1AdvExpectedUnsignedMetadataKeyHmac = {0};
constexpr std::array<uint8_t, 32> V1AdvExpectedSignedMetadataKeyHmac = {
    0x1C, 0xBC, 0xEB, 0xDC, 0x17, 0xB5, 0x91, 0xE5, 0x07, 0x9D, 0x70,
    0xC1, 0xE8, 0x4B, 0xCC, 0xDB, 0x4B, 0x0F, 0x76, 0x83, 0x59, 0x62,
    0x0A, 0x2D, 0x55, 0x0B, 0x3B, 0x36, 0xA4, 0x92, 0x8B, 0x13,
};
constexpr std::array<uint8_t, 32> V1AdvPublicKey = {
    0x6D, 0x0D, 0xB6, 0x09, 0x10, 0xB1, 0x4E, 0xC4, 0x7E, 0x10, 0x16,
    0x14, 0x9C, 0x9F, 0xF2, 0x14, 0x0F, 0xEC, 0x53, 0x76, 0xE3, 0x07,
    0xD9, 0xD3, 0x9E, 0xAE, 0xE7, 0x45, 0x2C, 0x03, 0xEC, 0x6D,
};
inline std::vector<uint8_t> V1AdvEncryptedMetadata = {
    0x09, 0xB8, 0xC6, 0x6B, 0x71, 0x43, 0x55, 0x4C, 0xB9, 0x9D, 0xBF,
    0xE4, 0xAF, 0x3E, 0xA2, 0x56, 0x0E, 0x6C, 0xBC, 0xDC, 0x3F, 0x3F,
    0x0D, 0x28, 0xD4, 0x50, 0xA9, 0xEA, 0xC3, 0x60, 0xB0, 0x81, 0x31,
    0xE2, 0x67, 0xB5, 0xC8, 0x15, 0x0C, 0xCA, 0x0B, 0x9B, 0x2C, 0x80,
    0xC1, 0xB1, 0xF6, 0x5F, 0xE1, 0x51, 0xF9, 0xE2, 0x23, 0x56, 0xD4,
    0x0B, 0x89, 0xA7, 0xF3, 0x4D, 0xE8, 0x79, 0x26, 0x44, 0x7E, 0x62,
    0xDE, 0x53, 0x13, 0x15, 0x3D, 0xFC, 0x04, 0x2E, 0x2D, 0x08, 0x43,
    0x2E, 0xE1, 0x96, 0xE8, 0x0F, 0xD0, 0xFC, 0xDE, 0x03, 0x86, 0x23,
    0xB6, 0x98, 0x85, 0x27, 0x67, 0xD8, 0x1D, 0xC3, 0xE2, 0xE0, 0xA4,
    0x32, 0x1A, 0x5F, 0x51, 0x0B, 0xA8, 0xD8, 0xA7, 0x23, 0xA4, 0x57,
};
inline std::string ExpectedV1DecryptedMetadata(
    "{\"uuid\":\"378845e1-2616-420d-86f5-674177a7504d\","
    "\"display_name\":\"Alice\",\"location\":\"Wonderland\"}");

// Data suitable for use directly through the C API (bypassing the C++ wrapper)
constexpr np_ffi::internal::RawAdvertisementPayload V0AdvMultiDeInternals{
    {7, {0x00, 0x03, 0x15, 0x05, 0x26, 0x00, 0x46}}};

// Wrapper types directly usable by C++ API
constexpr nearby_protocol::ByteBuffer<255> V0AdvEmptyBuffer(V0AdvEmptyBytes);
constexpr nearby_protocol::RawAdvertisementPayload V0AdvEmpty(V0AdvEmptyBuffer);

constexpr nearby_protocol::ByteBuffer<255> V0AdvPlaintextBuffer(
    V0AdvPlaintextBytes);
constexpr nearby_protocol::RawAdvertisementPayload V0AdvPlaintext(
    V0AdvPlaintextBuffer);

constexpr nearby_protocol::ByteBuffer<255> V0AdvPlaintextMultiDeBuffer(
    V0AdvPlaintextMultiDeBytes);
constexpr nearby_protocol::RawAdvertisementPayload V0AdvPlaintextMultiDe(
    V0AdvPlaintextMultiDeBuffer);

constexpr nearby_protocol::ByteBuffer<255> V1AdvPlaintextBuffer(
    V1AdvPlaintextBytes);
constexpr nearby_protocol::RawAdvertisementPayload V1AdvPlaintext(
    V1AdvPlaintextBuffer);

constexpr nearby_protocol::ByteBuffer<255> V0AdvEncryptedBuffer(
    V0AdvEncryptedBytes);
constexpr nearby_protocol::RawAdvertisementPayload V0AdvEncryptedPayload(
    V0AdvEncryptedBuffer);

constexpr nearby_protocol::ByteBuffer<255> V1AdvEncryptedBuffer(
    V1AdvEncryptedBytes);
constexpr nearby_protocol::RawAdvertisementPayload V1AdvEncrypted(
    V1AdvEncryptedBuffer);

void test_panic_handler(nearby_protocol::PanicReason reason);

nearby_protocol::V0MatchableCredential GenerateRandomCredentialV0();

nearby_protocol::V1MatchableCredential GenerateRandomCredentialV1();

template <uint32_t N>
std::array<uint8_t, N> create_random_array() {
  std::array<uint8_t, N> array{};
  std::generate(array.begin(), array.end(), []() { return rand(); });
  return array;
}

std::string generate_hex_string(size_t length);

#endif  // NEARBY_PRESENCE_NP_CPP_FFI_TESTS_SHARED_TEST_UTILS_H_
