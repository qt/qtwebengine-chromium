// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert NR % 8 == 0
$assert 8 <= NR <= 32
$assert DATATYPE == "QU8"
$assert REQUANTIZATION in ["FP32", "RNDNU"]
#include <assert.h>

#include <arm_neon.h>

#include <xnnpack/igemm.h>
$if REQUANTIZATION == "FP32":
  #include <xnnpack/intrinsics-polyfill.h>
#include <xnnpack/math.h>


$PARAMS_STRUCT = "fp32_neonv8" if REQUANTIZATION == "FP32" else REQUANTIZATION.lower() + "_neon"
void xnn_qu8_igemm_minmax_${REQUANTIZATION.lower()}_ukernel_${MR}x${NR}c8__neoni8mm(
    size_t mr,
    size_t nc,
    size_t kc,
    size_t ks,
    const uint8_t** restrict a,
    const void* restrict w,
    uint8_t* restrict c,
    size_t cm_stride,
    size_t cn_stride,
    size_t a_offset,
    const uint8_t* zero,
    const union xnn_qu8_conv_minmax_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(mr != 0);
  assert(mr <= ${MR});
  assert(nc != 0);
  assert(kc != 0);
  assert(ks != 0);
  assert(ks % (${MR} * sizeof(void*)) == 0);
  assert(a_offset % sizeof(uint8_t) == 0);
  assert(a != NULL);
  assert(w != NULL);
  assert(c != NULL);

  kc = round_up_po2(kc, 8 * sizeof(uint8_t));
  uint8_t* c0 = c;
  $for M in range(1, MR):
    uint8_t* c${M} = (uint8_t*) ((uintptr_t) c${M-1} + cm_stride);
    $if M % 2 == 0:
      if XNN_UNPREDICTABLE(mr <= ${M}) {
        c${M} = c${M-1};
      }
    $elif M + 1 == MR:
      if XNN_UNPREDICTABLE(mr != ${M+1}) {
        c${M} = c${M-1};
      }
    $else:
      if XNN_UNPREDICTABLE(mr < ${M+1}) {
        c${M} = c${M-1};
      }

  const uint8x16_t vkernel_zero_point = vreinterpretq_u8_u32(vld1q_dup_u32((const void*) params->${PARAMS_STRUCT}.kernel_zero_point));

  do {
    // Initialize accumulators with bias. ${NR} bias values are loaded from the
    // weight matrix, at the start of the group of ${NR} columns.
    #if XNN_ARCH_ARM64
      $for N in range(0, NR, 4):
        const uint64x2x2_t vbias01x${ABC[N:N+4]} = vld2q_dup_u64(w); w = (const int32_t*) w + 4;
    #else
      $for N in range(0, NR, 4):
        uint64x2x2_t vbias01x${ABC[N:N+4]};
        vbias01x${ABC[N:N+4]}.val[0] = vld1q_dup_u64(w); w = (const int32_t*) w + 2;
        vbias01x${ABC[N:N+4]}.val[1] = vld1q_dup_u64(w); w = (const int32_t*) w + 2;
    #endif
    $for M in range(0, MR, 2):
      $for N in range(0, NR, 4):
        uint32x4_t vpacc${M}${M+1}x${ABC[N:N+2]} = vreinterpretq_u32_u64(vbias01x${ABC[N:N+4]}.val[0]);
        uint32x4_t vpacc${M}${M+1}x${ABC[N+2:N+4]} = vreinterpretq_u32_u64(vbias01x${ABC[N:N+4]}.val[1]);
    $for M in range(0, MR, 2):
      uint32x4_t vnacc${M}${M+1} = vmovq_n_u32(0);

    size_t p = ks;
    do {
      $for M in range(MR):
        const uint8_t* restrict a${M} = a[${M}];
        if XNN_UNPREDICTABLE(a${M} != zero) {
          a${M} = (const uint8_t*) ((uintptr_t) a${M} + a_offset);
        }
      a += ${MR};

      $for M in range(0, MR, 2):
        uint64x2x2_t va${M}${M+1}x${ABC[0:16]};
        va${M}${M+1}x${ABC[0:16]}.val[0] = vdupq_n_u64(0);
        va${M}${M+1}x${ABC[0:16]}.val[1] = vdupq_n_u64(0);
      // Inner accumulation loop along the ${NR} columns.
      size_t k = kc;
      // 2x partial unrolled loop to load 16 bytes at a time.
      while (k >= 16 * sizeof(uint8_t)) {
        // Load a ${MR}x16 block of activations.
        #if XNN_ARCH_ARM64
          $for M in range(0, MR, 2):
            va${M}${M+1}x${ABC[0:16]} = vld2q_lane_u64((const void*) a${M}, va${M}${M+1}x${ABC[0:16]}, 0); a${M} += 16;
          $for M in range(0, MR, 2):
            $if M + 1 < MR:
              va${M}${M+1}x${ABC[0:16]} = vld2q_lane_u64((const void*) a${M+1}, va${M}${M+1}x${ABC[0:16]}, 1); a${M+1} += 16;
        #else
          $for M in range(0, MR, 2):
            va${M}${M+1}x${ABC[0:16]}.val[0] = vld1q_lane_u64((const void*) a${M}, va${M}${M+1}x${ABC[0:16]}.val[0], 0); a${M} += 8;
            va${M}${M+1}x${ABC[0:16]}.val[1] = vld1q_lane_u64((const void*) a${M}, va${M}${M+1}x${ABC[0:16]}.val[1], 0); a${M} += 8;
          $for M in range(0, MR, 2):
            $if M + 1 < MR:
              va${M}${M+1}x${ABC[0:16]}.val[0] = vld1q_lane_u64((const void*) a${M+1}, va${M}${M+1}x${ABC[0:16]}.val[0], 1); a${M+1} += 8;
              va${M}${M+1}x${ABC[0:16]}.val[1] = vld1q_lane_u64((const void*) a${M+1}, va${M}${M+1}x${ABC[0:16]}.val[1], 1); a${M+1} += 8;
        #endif

        // Load a 16x${NR} block of weights.
        $for N in range(0, NR, 2):
          const uint8x16_t vb${ABC[N:N+2]}x${ABC[0:8]} = vld1q_u8(w); w = (const int8_t*) w + 16;
        $for N in range(0, NR, 2):
          const uint8x16_t vb${ABC[N:N+2]}x${ABC[8:16]} = vld1q_u8(w); w = (const int8_t*) w + 16;

        // Multiply-accumulate: ${MR}x16 * 16x${NR} --> ${MR}x${NR}.
        $for M in range(0, MR, 2):
          vnacc${M}${M+1} = vmmlaq_u32(vnacc${M}${M+1}, vkernel_zero_point, vreinterpretq_u8_u64(va${M}${M+1}x${ABC[0:16]}.val[0]));
          $for N in range(0, NR, 2):
            vpacc${M}${M+1}x${ABC[N:N+2]} = vmmlaq_u32(vpacc${M}${M+1}x${ABC[N:N+2]}, vreinterpretq_u8_u64(va${M}${M+1}x${ABC[0:16]}.val[0]), vb${ABC[N:N+2]}x${ABC[0:8]});
        $for M in range(0, MR, 2):
          vnacc${M}${M+1} = vmmlaq_u32(vnacc${M}${M+1}, vkernel_zero_point, vreinterpretq_u8_u64(va${M}${M+1}x${ABC[0:16]}.val[1]));
          $for N in range(0, NR, 2):
            vpacc${M}${M+1}x${ABC[N:N+2]} = vmmlaq_u32(vpacc${M}${M+1}x${ABC[N:N+2]}, vreinterpretq_u8_u64(va${M}${M+1}x${ABC[0:16]}.val[1]), vb${ABC[N:N+2]}x${ABC[8:16]});

        k -= 16 * sizeof(uint8_t);
      }
      // Handle up to 8 final positions of `k`
      if XNN_UNLIKELY(k != 0) {
        // Load a ${MR}x8 block of activations.
        $for M in range(0, MR, 2):
          uint64x2_t va${M}${M+1}x${ABC[0:8]} = vld1q_dup_u64((const void*) a${M}); a${M} += 8;
        $for M in range(0, MR, 2):
          $if M + 1 < MR:
            va${M}${M+1}x${ABC[0:8]} = vld1q_lane_u64((const void*) a${M+1}, va${M}${M+1}x${ABC[0:8]}, 1); a${M+1} += 8;

        // Load a 16x${NR} block of weights.
        $for N in range(0, NR, 2):
          const uint8x16_t vb${ABC[N:N+2]}x${ABC[0:8]} = vld1q_u8(w); w = (const uint8_t*) w + 16;

        // Multiply-accumulate: ${MR}x8 * 8x${NR} --> ${MR}x${NR}.
        $for M in range(0, MR, 2):
          vnacc${M}${M+1} = vmmlaq_u32(vnacc${M}${M+1}, vkernel_zero_point, vreinterpretq_u8_u64(va${M}${M+1}x${ABC[0:8]}));
          $for N in range(0, NR, 2):
            vpacc${M}${M+1}x${ABC[N:N+2]} = vmmlaq_u32(vpacc${M}${M+1}x${ABC[N:N+2]}, vreinterpretq_u8_u64(va${M}${M+1}x${ABC[0:8]}), vb${ABC[N:N+2]}x${ABC[0:8]});
      }
      p -= ${MR} * sizeof(void*);
    } while (p != 0);

    // Subtract zero point from accumulators.
    #if XNN_ARCH_ARM64
      $for M in range(0, MR, 2):
        const uint32x4_t vnacc${M}${M+1}x01 = vzip1q_u32(vnacc${M}${M+1}, vnacc${M}${M+1});
    #else
      $for M in range(0, MR, 2):
        const uint32x4_t vnacc${M}${M+1}x01 = vzipq_u32(vnacc${M}${M+1}, vnacc${M}${M+1}).val[0];
    #endif
    $for M in range(0, MR, 2):
      $for N in range(0, NR, 4):
        int32x4_t vacc${M}${M+1}x${ABC[N:N+2]} = vreinterpretq_s32_u32(vsubq_u32(vpacc${M}${M+1}x${ABC[N:N+2]}, vnacc${M}${M+1}x01));
        int32x4_t vacc${M}${M+1}x${ABC[N+2:N+4]} = vreinterpretq_s32_u32(vsubq_u32(vpacc${M}${M+1}x${ABC[N+2:N+4]}, vnacc${M}${M+1}x01));

    #if XNN_ARCH_ARM64
      $for M in range(0, MR, 2):
        $for N in range(0, NR, 4):
          int32x4_t vacc${M}x${ABC[N:N+4]} = vreinterpretq_s32_u64(vtrn1q_u64(vreinterpretq_u64_s32(vacc${M}${M+1}x${ABC[N:N+2]}), vreinterpretq_u64_s32(vacc${M}${M+1}x${ABC[N+2:N+4]})));
          $if M + 1 < MR:
            int32x4_t vacc${M+1}x${ABC[N:N+4]} = vreinterpretq_s32_u64(vtrn2q_u64(vreinterpretq_u64_s32(vacc${M}${M+1}x${ABC[N:N+2]}), vreinterpretq_u64_s32(vacc${M}${M+1}x${ABC[N+2:N+4]})));
    #else
      $for M in range(0, MR, 2):
        $for N in range(0, NR, 4):
          int32x4_t vacc${M}x${ABC[N:N+4]} = vcombine_s32(vget_low_s32(vacc${M}${M+1}x${ABC[N:N+2]}), vget_low_s32(vacc${M}${M+1}x${ABC[N+2:N+4]}));
          $if M + 1 < MR:
            int32x4_t vacc${M+1}x${ABC[N:N+4]} = vcombine_s32(vget_high_s32(vacc${M}${M+1}x${ABC[N:N+2]}), vget_high_s32(vacc${M}${M+1}x${ABC[N+2:N+4]}));
    #endif
    $if REQUANTIZATION == "RNDNU":
      const int32x4_t vright_pre_shift = vld1q_dup_s32(&params->${PARAMS_STRUCT}.right_pre_shift);
      const int32x4_t vmultiplier = vld1q_dup_s32(&params->${PARAMS_STRUCT}.multiplier);
      const int32x4_t vright_post_shift = vld1q_dup_s32(&params->${PARAMS_STRUCT}.right_post_shift);

      $for M in range(MR):
        $for N in range(0, NR, 4):
          vacc${M}x${ABC[N:N+4]} = vshlq_s32(vacc${M}x${ABC[N:N+4]}, vright_pre_shift);

      $for M in range(MR):
        $for N in range(0, NR, 4):
          vacc${M}x${ABC[N:N+4]} = vqdmulhq_s32(vacc${M}x${ABC[N:N+4]}, vmultiplier);

      $for M in range(MR):
        $for N in range(0, NR, 4):
          vacc${M}x${ABC[N:N+4]} = vrshlq_s32(vacc${M}x${ABC[N:N+4]}, vright_post_shift);
    $elif REQUANTIZATION == "FP32":
      $for M in range(MR):
        $for N in range(0, NR, 4):
          float32x4_t vfpacc${M}x${ABC[N:N+4]} = vcvtq_f32_s32(vacc${M}x${ABC[N:N+4]});

      const float32x4_t vscale = vld1q_dup_f32(&params->${PARAMS_STRUCT}.scale);
      $for M in range(MR):
        $for N in range(0, NR, 4):
          vfpacc${M}x${ABC[N:N+4]} = vmulq_f32(vfpacc${M}x${ABC[N:N+4]}, vscale);

      $for M in range(MR):
        $for N in range(0, NR, 4):
          vacc${M}x${ABC[N:N+4]} = vcvtnq_s32_f32(vfpacc${M}x${ABC[N:N+4]});

    const int16x8_t voutput_zero_point = vld1q_dup_s16(&params->${PARAMS_STRUCT}.output_zero_point);
#if XNN_ARCH_ARM64
    $for M in range(MR):
      $for N in range(0, NR, 8):
        const int16x8_t vacc${M}x${ABC[N:N+8]} = vqaddq_s16(vqmovn_high_s32(vqmovn_s32(vacc${M}x${ABC[N:N+4]}), vacc${M}x${ABC[N+4:N+8]}), voutput_zero_point);

    $for M in range(MR):
      $for N in range(0, NR, 16):
        $if N + 8 < NR:
          uint8x16_t vout${M}x${ABC[N:N+16]} = vqmovun_high_s16(vqmovun_s16(vacc${M}x${ABC[N:N+8]}), vacc${M}x${ABC[N+8:N+16]});
        $elif M % 2 == 1:
          uint8x16_t vout${M-1}x${ABC[N:N+8]}_${M}x${ABC[N:N+8]} = vqmovun_high_s16(vqmovun_s16(vacc${M-1}x${ABC[N:N+8]}), vacc${M}x${ABC[N:N+8]});
        $elif M + 1 == MR:
          uint8x8_t vout${M}x${ABC[N:N+8]} = vqmovun_s16(vacc${M}x${ABC[N:N+8]});
#else
    $for M in range(MR):
      $for N in range(0, NR, 8):
        const int16x8_t vacc${M}x${ABC[N:N+8]} = vqaddq_s16(vcombine_s16(vqmovn_s32(vacc${M}x${ABC[N:N+4]}), vqmovn_s32(vacc${M}x${ABC[N+4:N+8]})), voutput_zero_point);

    $for M in range(MR):
      $for N in range(0, NR, 16):
        $if N + 8 < NR:
          uint8x16_t vout${M}x${ABC[N:N+16]} = vcombine_u8(vqmovun_s16(vacc${M}x${ABC[N:N+8]}), vqmovun_s16(vacc${M}x${ABC[N+8:N+16]}));
        $elif M % 2 == 1:
          uint8x16_t vout${M-1}x${ABC[N:N+8]}_${M}x${ABC[N:N+8]} = vcombine_u8(vqmovun_s16(vacc${M-1}x${ABC[N:N+8]}), vqmovun_s16(vacc${M}x${ABC[N:N+8]}));
        $elif M + 1 == MR:
          uint8x8_t vout${M}x${ABC[N:N+8]} = vqmovun_s16(vacc${M}x${ABC[N:N+8]});
#endif
    $if NR == 8 and MR == 1:
      const uint8x8_t voutput_min = vld1_dup_u8(&params->${PARAMS_STRUCT}.output_min);
      const uint8x8_t voutput_max = vld1_dup_u8(&params->${PARAMS_STRUCT}.output_max);
    $else:
      const uint8x16_t voutput_min = vld1q_dup_u8(&params->${PARAMS_STRUCT}.output_min);
      const uint8x16_t voutput_max = vld1q_dup_u8(&params->${PARAMS_STRUCT}.output_max);

    $for M in range(MR):
      $for N in range(0, NR, 16):
        $if N + 8 < NR:
          vout${M}x${ABC[N:N+16]} = vmaxq_u8(vout${M}x${ABC[N:N+16]}, voutput_min);
        $elif M % 2 == 1:
          vout${M-1}x${ABC[N:N+8]}_${M}x${ABC[N:N+8]} = vmaxq_u8(vout${M-1}x${ABC[N:N+8]}_${M}x${ABC[N:N+8]}, voutput_min);
        $elif M + 1 == MR:
          $if NR == 8 and MR == 1:
            vout${M}x${ABC[N:N+8]} = vmax_u8(vout${M}x${ABC[N:N+8]}, voutput_min);
          $else:
            vout${M}x${ABC[N:N+8]} = vmax_u8(vout${M}x${ABC[N:N+8]}, vget_low_u8(voutput_min));

    $for M in range(MR):
      $for N in range(0, NR, 16):
        $if N + 8 < NR:
          vout${M}x${ABC[N:N+16]} = vminq_u8(vout${M}x${ABC[N:N+16]}, voutput_max);
        $elif M % 2 == 1:
          vout${M-1}x${ABC[N:N+8]}_${M}x${ABC[N:N+8]} = vminq_u8(vout${M-1}x${ABC[N:N+8]}_${M}x${ABC[N:N+8]}, voutput_max);
        $elif M + 1 == MR:
          $if NR == 8 and MR == 1:
            vout${M}x${ABC[N:N+8]} = vmin_u8(vout${M}x${ABC[N:N+8]}, voutput_max);
          $else:
            vout${M}x${ABC[N:N+8]} = vmin_u8(vout${M}x${ABC[N:N+8]}, vget_low_u8(voutput_max));

    if (nc >= ${NR}) {
      $for M in reversed(range(MR)):
        $if NR > 8:
          vst1q_u8(c${M}, vout${M}x${ABC[N:N+16]});
        $elif M % 2 == 1:
          vst1_u8(c${M}, vget_high_u8(vout${M-1}x${ABC[N:N+8]}_${M}x${ABC[N:N+8]}));
          vst1_u8(c${M-1}, vget_low_u8(vout${M-1}x${ABC[N:N+8]}_${M}x${ABC[N:N+8]}));
        $elif M + 1 == MR:
          vst1_u8(c${M}, vout${M}x${ABC[N:N+8]});
      $for M in reversed(range(MR)):
        $for N in range(16, NR, 16):
          $if N + 8 < NR:
            vst1q_u8(c${M} + ${N}, vout${M}x${ABC[N:N+16]});
          $elif M % 2 == 1:
            vst1_u8(c${M} + ${N}, vget_high_u8(vout${M-1}x${ABC[N:N+8]}_${M}x${ABC[N:N+8]}));
            vst1_u8(c${M-1} + ${N}, vget_low_u8(vout${M-1}x${ABC[N:N+8]}_${M}x${ABC[N:N+8]}));
          $elif M + 1 == MR:
            vst1_u8(c${M} + ${N}, vout${M}x${ABC[N:N+8]});

      $for M in reversed(range(MR)):
        c${M} = (uint8_t*) ((uintptr_t) c${M} + cn_stride);

      a = (const uint8_t**restrict) ((uintptr_t) a - ks);

      nc -= ${NR};
    } else {
      $if NR == 32:
        if (nc & 16) {
          $for M in reversed(range(MR)):
            vst1q_u8(c${M}, vout${M}x${ABC[0:16]});  c${M} += 16;

          $for M in reversed(range(MR)):
            vout${M}x${ABC[0:16]} = vout${M}x${ABC[16:32]};
        }
      $if NR >= 16:
        $for M in reversed(range(MR)):
          $if M % 2 == 1:
            uint8x16_t vout${M-1}x01234567_${M}x01234567 = vcombine_u8(vget_low_u8(vout${M-1}x0123456789ABCDEF), vget_low_u8(vout${M}x0123456789ABCDEF));
          $elif M + 1 == MR:
            uint8x8_t vout${M}x01234567 = vget_low_u8(vout${M}x0123456789ABCDEF);
        if (nc & 8) {
          $for M in reversed(range(MR)):
            $if M % 2 == 1:
              vst1_u8(c${M}, vget_high_u8(vout${M-1}x01234567_${M}x01234567)); c${M} += 8;
              vst1_u8(c${M-1}, vget_low_u8(vout${M-1}x01234567_${M}x01234567)); c${M-1} += 8;
            $elif M + 1 == MR:
              vst1_u8(c${M}, vout${M}x01234567); c${M} += 8;  // This line
          $for M in reversed(range(MR)):
            $if M % 2 == 1:
              vout${M-1}x01234567_${M}x01234567 = vcombine_u8(vget_high_u8(vout${M-1}x0123456789ABCDEF), vget_high_u8(vout${M}x0123456789ABCDEF));
            $elif M + 1 == MR:
              vout${M}x01234567 = vget_high_u8(vout${M}x0123456789ABCDEF);
        }
      if (nc & 4) {
        $for M in reversed(range(MR)):
          $if M % 2 == 1:
            vst1q_lane_u32((void*) c${M}, vreinterpretq_u32_u8(vout${M-1}x01234567_${M}x01234567), 2); c${M} += 4;
            vst1q_lane_u32((void*) c${M-1}, vreinterpretq_u32_u8(vout${M-1}x01234567_${M}x01234567), 0); c${M-1} += 4;
          $elif M + 1 == MR:
            vst1_lane_u32((void*) c${M}, vreinterpret_u32_u8(vout${M}x01234567), 0); c${M} += 4;
        $for M in reversed(range(MR)):
          $if M % 2 == 1:
            vout${M-1}x01234567_${M}x01234567 = vextq_u8(vout${M-1}x01234567_${M}x01234567, vout${M-1}x01234567_${M}x01234567, 4);
          $elif M + 1 == MR:
            vout${M}x01234567 = vext_u8(vout${M}x01234567, vout${M}x01234567, 4);
      }
      if (nc & 2) {
        $for M in reversed(range(MR)):
          $if M % 2 == 1:
            vst1q_lane_u16((void*) c${M}, vreinterpretq_u16_u8(vout${M-1}x01234567_${M}x01234567), 4); c${M} += 2;
            vst1q_lane_u16((void*) c${M-1}, vreinterpretq_u16_u8(vout${M-1}x01234567_${M}x01234567), 0); c${M-1} += 2;
          $elif M + 1 == MR:
            vst1_lane_u16((void*) c${M}, vreinterpret_u16_u8(vout${M}x01234567), 0); c${M} += 2;
        $for M in reversed(range(MR)):
          $if M % 2 == 1:
            vout${M-1}x01234567_${M}x01234567 = vextq_u8(vout${M-1}x01234567_${M}x01234567, vout${M-1}x01234567_${M}x01234567, 2);
          $elif M + 1 == MR:
            vout${M}x01234567 = vext_u8(vout${M}x01234567, vout${M}x01234567, 2);
      }
      if (nc & 1) {
        $for M in reversed(range(MR)):
          $if M % 2 == 1:
            vst1q_lane_u8(c${M}, vout${M-1}x01234567_${M}x01234567, 8);
            vst1q_lane_u8(c${M-1}, vout${M-1}x01234567_${M}x01234567, 0);
          $elif M + 1 == MR:
            vst1_lane_u8(c${M}, vout${M}x01234567, 0);
      }

      nc = 0;
    }
  } while (nc != 0);
}
