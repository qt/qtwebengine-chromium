// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE >= 1
$assert OP in ["MAX", "MIN", "MINMAX"]
#include <assert.h>

#include <xnnpack/common.h>
$if not WASM:
  #include <xnnpack/math.h>
#include <xnnpack/reduce.h>


$ACC_SUFFIX = "" if ACCUMULATORS == 1 else "_acc%d" % ACCUMULATORS
$MAX = "__builtin_wasm_max_f32" if WASM else "math_max_f32"
$MIN = "__builtin_wasm_min_f32" if WASM else "math_min_f32"
$EMIT_MIN = "MIN" in OP
$EMIT_MAX = "MAX" in OP
$ISA = "wasm" if WASM else "scalar"
$MAX_POS = 1 if OP == "MINMAX" else 0
void xnn_f32_r${OP.lower()}_ukernel__${ISA}_u${BATCH_TILE}${ACC_SUFFIX}(
    size_t batch,
    const float* input,
    float* output,
    const union xnn_f32_default_params params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input != NULL);
  assert(output != NULL);

  $if EMIT_MIN:
    float vmin0 = *input;
  $if EMIT_MAX:
    float vmax0 = *input;
  $for A in range(1, ACCUMULATORS):
    $if EMIT_MIN:
      float vmin${A} = vmin0;
    $if EMIT_MAX:
      float vmax${A} = vmax0;
  $if BATCH_TILE == 1:
    do {
      const float vt = *input++;
      $if EMIT_MIN:
        vmin0 = ${MIN}(vmin0, vt);
      $if EMIT_MAX:
        vmax0 = ${MAX}(vmax0, vt);
      batch -= sizeof(float);
    } while (batch != 0);
  $else:
    for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
      $for N in range(BATCH_TILE):
        const float vt${N} = input[${N}];
      input += ${BATCH_TILE};

      $for N in range(BATCH_TILE):
        $if EMIT_MIN:
          vmin${N % ACCUMULATORS} = ${MIN}(vmin${N % ACCUMULATORS}, vt${N});
        $if EMIT_MAX:
          vmax${N % ACCUMULATORS} = ${MAX}(vmax${N % ACCUMULATORS}, vt${N});
    }
    $if ACCUMULATORS > 1:
      $ACC_SLICE = 1
      $while ACC_SLICE < ACCUMULATORS:
        $for A in range(0, ACCUMULATORS, ACC_SLICE * 2):
          $if A + ACC_SLICE < ACCUMULATORS:
            $if EMIT_MIN:
              vmin${A} = ${MIN}(vmin${A}, vmin${A + ACC_SLICE});
            $if EMIT_MAX:
              vmax${A} = ${MAX}(vmax${A}, vmax${A + ACC_SLICE});
        $ACC_SLICE *= 2

    if XNN_UNLIKELY(batch != 0) {
      $if BATCH_TILE == 2:
        const float vt = *input;
        $if EMIT_MIN:
          vmin0 = ${MIN}(vmin0, vt);
        $if EMIT_MAX:
          vmax0 = ${MAX}(vmax0, vt);
      $else:
        do {
          const float vt = *input++;
          $if EMIT_MIN:
            vmin0 = ${MIN}(vmin0, vt);
          $if EMIT_MAX:
            vmax0 = ${MAX}(vmax0, vt);
          batch -= sizeof(float);
        } while (batch != 0);
    }
  $if EMIT_MIN:
    output[0] = vmin0;
  $if EMIT_MAX:
    output[${MAX_POS}] = vmax0;
}
