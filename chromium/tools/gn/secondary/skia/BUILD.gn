# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

enable_printing = true  # TODO(brettw) pass this feature flag in somehow.
skia_support_gpu = !is_ios
skia_support_pdf = !is_ios && enable_printing

config("skia_config") {
  includes = [
    "config",
    "//third_party/skia/include/config",
    "//third_party/skia/include/core",
    "//third_party/skia/include/effects",
    "//third_party/skia/include/images",
    "//third_party/skia/include/lazy",
    "//third_party/skia/include/pathops",
    "//third_party/skia/include/pdf",
    "//third_party/skia/include/pipe",
    "//third_party/skia/include/ports",
    "//third_party/skia/include/utils",
    "//third_party/skia/src/core",
    "//third_party/skia/src/image",
    "//third_party/skia/src/ports",
    "//third_party/skia/src/sfnt",
    "//third_party/skia/src/utils",
    "//third_party/skia/src/lazy",
  ]

  defines = [
    "SK_ENABLE_INST_COUNT=0",
    "GR_GL_CUSTOM_SETUP_HEADER=\"GrGLConfig_chrome.h\"",
  ]

  if (component_mode == "shared_library") {
    defines += [
      "SKIA_DLL",
      "GR_DLL=1",
    ]
  }

  if (skia_support_gpu) {
    includes += [
      "//third_party/skia/include/gpu",
      "//third_party/skia/src/gpu",
    ]
    defines += "SK_SUPPORT_GPU=1"
  } else {
    defines = "SK_SUPPORT_GPU=0"
  }

  # For POSIX platforms, prefer the Mutex implementation provided by Skia
  # since it does not generate static initializers.
  if (is_posix) {
    defines += "SK_USE_POSIX_THREADS"
  }

  if (is_android) {
    defines += [
      "SK_BUILD_FOR_ANDROID",
      "USE_CHROMIUM_SKIA",
    ]
  }
}

component("skia") {
  external = true

  deps = [
    ":skia_library",
    ":skia_chrome",
  ]

  direct_dependent_configs = [ ":skia_config" ]

  forward_dependent_configs_from = [
    ":skia_library",
    ":skia_chrome",
  ]

      #SKIA_IMPLEMENTATION=1
  # ["clang==1", {
  #   "xcode_settings": {
  #     "WARNING_CFLAGS!": [
  #       # Don"t warn about string->bool used in asserts.
  #       "-Wstring-conversion",
  #     ],
  #   },
  #   "cflags!": [
  #     "-Wstring-conversion",
  #   ],
  # }],
}

config("skia_chrome_config") {
  includes = [ "ext" ]
}

static_library("skia_chrome") {
  sources = [
    "ext/analysis_canvas.cc",
    "ext/analysis_canvas.h",
    "ext/benchmarking_canvas.cc",
    "ext/benchmarking_canvas.h",
    "ext/bitmap_platform_device.h",
    "ext/bitmap_platform_device_android.cc",
    "ext/bitmap_platform_device_android.h",
    "ext/bitmap_platform_device_data.h",
    "ext/bitmap_platform_device_linux.cc",
    "ext/bitmap_platform_device_linux.h",
    "ext/bitmap_platform_device_mac.cc",
    "ext/bitmap_platform_device_mac.h",
    "ext/bitmap_platform_device_win.cc",
    "ext/bitmap_platform_device_win.h",
    "ext/convolver.cc",
    "ext/convolver.h",
    "ext/google_logging.cc",
    "ext/image_operations.cc",
    "ext/image_operations.h",
    "ext/lazy_pixel_ref.cc",
    "ext/lazy_pixel_ref.h",
    "ext/lazy_pixel_ref_utils.cc",
    "ext/lazy_pixel_ref_utils.h",
    "ext/SkThread_chrome.cc",
    "ext/opacity_draw_filter.cc",
    "ext/opacity_draw_filter.h",
    "ext/paint_simplifier.cc",
    "ext/paint_simplifier.h",
    "ext/platform_canvas.cc",
    "ext/platform_canvas.h",
    "ext/platform_device.cc",
    "ext/platform_device.h",
    "ext/platform_device_linux.cc",
    "ext/platform_device_mac.cc",
    "ext/platform_device_win.cc",
    "ext/recursive_gaussian_convolution.cc",
    "ext/recursive_gaussian_convolution.h",
    "ext/refptr.h",
    "ext/SkDiscardableMemory_chrome.h",
    "ext/SkDiscardableMemory_chrome.cc",
    "ext/SkMemory_new_handler.cpp",
    "ext/skia_trace_shim.h",
    "ext/skia_utils_base.cc",
    "ext/skia_utils_base.h",
    "ext/skia_utils_ios.mm",
    "ext/skia_utils_ios.h",
    "ext/skia_utils_mac.mm",
    "ext/skia_utils_mac.h",
    "ext/skia_utils_win.cc",
    "ext/skia_utils_win.h",
    "ext/vector_canvas.cc",
    "ext/vector_canvas.h",
    "ext/vector_platform_device_emf_win.cc",
    "ext/vector_platform_device_emf_win.h",
    "ext/vector_platform_device_skia.cc",
    "ext/vector_platform_device_skia.h",
  ]

  if (is_posix) {
    sources -= "ext/SkThread_chrome.cc"
  }
  if (is_ios) {
    sources -= "ext/vector_platform_device_skia.cc"
    #TODO(brettw) deps -= skia_chrome_opts
  }
  if (is_win) {
    sources -= "ext/SkThread_chrome.cc"
  }

  if (is_android && !enable_printing) {
    sources -= [ "ext/skia_utils_base.cc", "ext/vector_platform_device_skia.cc" ]
  }

  configs += ":skia_config"
  direct_dependent_configs = [ ":skia_chrome_config" ]

  deps = [
    ":skia_library",
    ":skia_chrome_opts",
    "//base",
    "//base/third_party/dynamic_annotations",
  ]

  #  # TODO(scottmg): http://crbug.com/177306
  #  ["clang==1", {
  #    "xcode_settings": {
  #      "WARNING_CFLAGS!": [
  #        # Don"t warn about string->bool used in asserts.
  #        "-Wstring-conversion",
  #      ],
  #    },
  #    "cflags!": [
  #      "-Wstring-conversion",
  #    ],
  #  }],
  #],
#
  #"target_conditions": [
  #  # Pull in specific linux files for android (which have been filtered out
  #  # by file name rules).
  #  [ "OS == "android"", {
  #    "sources/": [
  #      ["include", "ext/platform_device_linux\\.cc$"],
  #    ],
  #  }],
}

skia_gpu_sources = [
  "//third_party/skia/include/gpu/gl/GrGLConfig.h",
  "//third_party/skia/include/gpu/gl/GrGLExtensions.h",
  "//third_party/skia/include/gpu/gl/GrGLFunctions.h",
  "//third_party/skia/include/gpu/gl/GrGLInterface.h",
  "//third_party/skia/include/gpu/gl/SkGLContextHelper.h",
  "//third_party/skia/include/gpu/GrAARectRenderer.h",
  "//third_party/skia/include/gpu/GrBackendEffectFactory.h",
  "//third_party/skia/include/gpu/GrClipData.h",
  "//third_party/skia/include/gpu/GrColor.h",
  "//third_party/skia/include/gpu/GrConfig.h",
  "//third_party/skia/include/gpu/GrContextFactory.h",
  "//third_party/skia/include/gpu/GrContext.h",
  "//third_party/skia/include/gpu/GrEffect.h",
  "//third_party/skia/include/gpu/GrEffectStage.h",
  "//third_party/skia/include/gpu/GrEffectUnitTest.h",
  "//third_party/skia/include/gpu/GrFontScaler.h",
  "//third_party/skia/include/gpu/GrGlyph.h",
  "//third_party/skia/include/gpu/GrKey.h",
  "//third_party/skia/include/gpu/GrNoncopyable.h",
  "//third_party/skia/include/gpu/GrOvalRenderer.h",
  "//third_party/skia/include/gpu/GrPaint.h",
  "//third_party/skia/include/gpu/GrPathRendererChain.h",
  "//third_party/skia/include/gpu/GrPoint.h",
  "//third_party/skia/include/gpu/GrRect.h",
  "//third_party/skia/include/gpu/GrRefCnt.h",
  "//third_party/skia/include/gpu/GrRenderTarget.h",
  "//third_party/skia/include/gpu/GrResource.h",
  "//third_party/skia/include/gpu/GrSurface.h",
  "//third_party/skia/include/gpu/GrTBackendEffectFactory.h",
  "//third_party/skia/include/gpu/GrTextContext.h",
  "//third_party/skia/include/gpu/GrTextureAccess.h",
  "//third_party/skia/include/gpu/GrTexture.h",
  "//third_party/skia/include/gpu/GrTypes.h",
  "//third_party/skia/include/gpu/GrUserConfig.h",
  "//third_party/skia/include/gpu/SkGpuDevice.h",
  "//third_party/skia/include/gpu/SkGr.h",
  "//third_party/skia/include/gpu/SkGrPixelRef.h",
  "//third_party/skia/include/gpu/SkGrTexturePixelRef.h",
  "//third_party/skia/src/gpu/effects/Gr1DKernelEffect.h",
  "//third_party/skia/src/gpu/effects/GrBezierEffect.cpp",
  "//third_party/skia/src/gpu/effects/GrBezierEffect.h",
  "//third_party/skia/src/gpu/effects/GrBicubicEffect.cpp",
  "//third_party/skia/src/gpu/effects/GrBicubicEffect.h",
  "//third_party/skia/src/gpu/effects/GrConfigConversionEffect.cpp",
  "//third_party/skia/src/gpu/effects/GrConfigConversionEffect.h",
  "//third_party/skia/src/gpu/effects/GrConvolutionEffect.cpp",
  "//third_party/skia/src/gpu/effects/GrConvolutionEffect.h",
  "//third_party/skia/src/gpu/effects/GrSimpleTextureEffect.cpp",
  "//third_party/skia/src/gpu/effects/GrSimpleTextureEffect.h",
  "//third_party/skia/src/gpu/effects/GrSingleTextureEffect.cpp",
  "//third_party/skia/src/gpu/effects/GrSingleTextureEffect.h",
  "//third_party/skia/src/gpu/effects/GrTextureDomainEffect.cpp",
  "//third_party/skia/src/gpu/effects/GrTextureDomainEffect.h",
  "//third_party/skia/src/gpu/effects/GrTextureStripAtlas.cpp",
  "//third_party/skia/src/gpu/effects/GrTextureStripAtlas.h",
  "//third_party/skia/src/gpu/gl/GrGLBufferImpl.cpp",
  "//third_party/skia/src/gpu/gl/GrGLBufferImpl.h",
  "//third_party/skia/src/gpu/gl/GrGLCaps.cpp",
  "//third_party/skia/src/gpu/gl/GrGLCaps.h",
  "//third_party/skia/src/gpu/gl/GrGLContext.cpp",
  "//third_party/skia/src/gpu/gl/GrGLContext.h",
  "//third_party/skia/src/gpu/gl/GrGLCreateNativeInterface_none.cpp",
  "//third_party/skia/src/gpu/gl/GrGLDefaultInterface_none.cpp",
  "//third_party/skia/src/gpu/gl/GrGLDefines.h",
  "//third_party/skia/src/gpu/gl/GrGLEffect.cpp",
  "//third_party/skia/src/gpu/gl/GrGLEffect.h",
  "//third_party/skia/src/gpu/gl/GrGLEffectMatrix.cpp",
  "//third_party/skia/src/gpu/gl/GrGLEffectMatrix.h",
  "//third_party/skia/src/gpu/gl/GrGLExtensions.cpp",
  "//third_party/skia/src/gpu/gl/GrGLIndexBuffer.cpp",
  "//third_party/skia/src/gpu/gl/GrGLIndexBuffer.h",
  "//third_party/skia/src/gpu/gl/GrGLInterface.cpp",
  "//third_party/skia/src/gpu/gl/GrGLIRect.h",
  "//third_party/skia/src/gpu/gl/GrGLNoOpInterface.cpp",
  "//third_party/skia/src/gpu/gl/GrGLNoOpInterface.h",
  "//third_party/skia/src/gpu/gl/GrGLPath.cpp",
  "//third_party/skia/src/gpu/gl/GrGLPath.h",
  "//third_party/skia/src/gpu/gl/GrGLProgram.cpp",
  "//third_party/skia/src/gpu/gl/GrGLProgramDesc.cpp",
  "//third_party/skia/src/gpu/gl/GrGLProgramDesc.h",
  "//third_party/skia/src/gpu/gl/GrGLProgram.h",
  "//third_party/skia/src/gpu/gl/GrGLRenderTarget.cpp",
  "//third_party/skia/src/gpu/gl/GrGLRenderTarget.h",
  "//third_party/skia/src/gpu/gl/GrGLShaderBuilder.cpp",
  "//third_party/skia/src/gpu/gl/GrGLShaderBuilder.h",
  "//third_party/skia/src/gpu/gl/GrGLShaderVar.h",
  "//third_party/skia/src/gpu/gl/GrGLSL.cpp",
  "//third_party/skia/src/gpu/gl/GrGLSL.h",
  "//third_party/skia/src/gpu/gl/GrGLSL_impl.h",
  "//third_party/skia/src/gpu/gl/GrGLStencilBuffer.cpp",
  "//third_party/skia/src/gpu/gl/GrGLStencilBuffer.h",
  "//third_party/skia/src/gpu/gl/GrGLTexture.cpp",
  "//third_party/skia/src/gpu/gl/GrGLTexture.h",
  "//third_party/skia/src/gpu/gl/GrGLUniformHandle.h",
  "//third_party/skia/src/gpu/gl/GrGLUniformManager.cpp",
  "//third_party/skia/src/gpu/gl/GrGLUniformManager.h",
  "//third_party/skia/src/gpu/gl/GrGLUtil.cpp",
  "//third_party/skia/src/gpu/gl/GrGLUtil.h",
  "//third_party/skia/src/gpu/gl/GrGLVertexArray.cpp",
  "//third_party/skia/src/gpu/gl/GrGLVertexArray.h",
  "//third_party/skia/src/gpu/gl/GrGLVertexBuffer.cpp",
  "//third_party/skia/src/gpu/gl/GrGLVertexBuffer.h",
  "//third_party/skia/src/gpu/gl/GrGpuGL.cpp",
  "//third_party/skia/src/gpu/gl/GrGpuGL.h",
  "//third_party/skia/src/gpu/gl/GrGpuGL_program.cpp",
  "//third_party/skia/src/gpu/gl/SkGLContextHelper.cpp"
  "//third_party/skia/src/gpu/GrAAConvexPathRenderer.cpp",
  "//third_party/skia/src/gpu/GrAAConvexPathRenderer.h",
  "//third_party/skia/src/gpu/GrAAHairLinePathRenderer.cpp",
  "//third_party/skia/src/gpu/GrAAHairLinePathRenderer.h",
  "//third_party/skia/src/gpu/GrAARectRenderer.cpp",
  "//third_party/skia/src/gpu/GrAddPathRenderers_default.cpp",
  "//third_party/skia/src/gpu/GrAllocator.h",
  "//third_party/skia/src/gpu/GrAllocPool.cpp",
  "//third_party/skia/src/gpu/GrAllocPool.h",
  "//third_party/skia/src/gpu/GrAtlas.cpp",
  "//third_party/skia/src/gpu/GrAtlas.h",
  "//third_party/skia/src/gpu/GrBinHashKey.h",
  "//third_party/skia/src/gpu/GrBlend.cpp",
  "//third_party/skia/src/gpu/GrBlend.h",
  "//third_party/skia/src/gpu/GrBufferAllocPool.cpp",
  "//third_party/skia/src/gpu/GrBufferAllocPool.h",
  "//third_party/skia/src/gpu/GrCacheID.cpp",
  "//third_party/skia/src/gpu/GrClipData.cpp",
  "//third_party/skia/src/gpu/GrClipMaskCache.cpp",
  "//third_party/skia/src/gpu/GrClipMaskCache.h",
  "//third_party/skia/src/gpu/GrClipMaskManager.cpp",
  "//third_party/skia/src/gpu/GrClipMaskManager.h",
  "//third_party/skia/src/gpu/GrContext.cpp",
  "//third_party/skia/src/gpu/GrDefaultPathRenderer.cpp",
  "//third_party/skia/src/gpu/GrDefaultPathRenderer.h",
  "//third_party/skia/src/gpu/GrDrawState.cpp",
  "//third_party/skia/src/gpu/GrDrawState.h",
  "//third_party/skia/src/gpu/GrDrawTargetCaps.h",
  "//third_party/skia/src/gpu/GrDrawTarget.cpp",
  "//third_party/skia/src/gpu/GrDrawTarget.h",
  "//third_party/skia/src/gpu/GrEffect.cpp",
  "//third_party/skia/src/gpu/GrGeometryBuffer.cpp",
  "//third_party/skia/src/gpu/GrGeometryBuffer.h",
  "//third_party/skia/src/gpu/GrGpu.cpp",
  "//third_party/skia/src/gpu/GrGpuFactory.cpp",
  "//third_party/skia/src/gpu/GrGpu.h",
  "//third_party/skia/src/gpu/GrIndexBuffer.h",
  "//third_party/skia/src/gpu/GrInOrderDrawBuffer.cpp",
  "//third_party/skia/src/gpu/GrInOrderDrawBuffer.h",
  "//third_party/skia/src/gpu/GrMemory.cpp",
  "//third_party/skia/src/gpu/GrMemoryPool.cpp",
  "//third_party/skia/src/gpu/GrMemoryPool.h",
  "//third_party/skia/src/gpu/GrOvalRenderer.cpp",
  "//third_party/skia/src/gpu/GrPaint.cpp",
  "//third_party/skia/src/gpu/GrPath.cpp",
  "//third_party/skia/src/gpu/GrPath.h",
  "//third_party/skia/src/gpu/GrPathRendererChain.cpp",
  "//third_party/skia/src/gpu/GrPathRenderer.cpp",
  "//third_party/skia/src/gpu/GrPathRenderer.h",
  "//third_party/skia/src/gpu/GrPathUtils.cpp",
  "//third_party/skia/src/gpu/GrPathUtils.h",
  "//third_party/skia/src/gpu/GrPlotMgr.h",
  "//third_party/skia/src/gpu/GrRectanizer.cpp",
  "//third_party/skia/src/gpu/GrRectanizer.h",
  "//third_party/skia/src/gpu/GrRedBlackTree.h",
  "//third_party/skia/src/gpu/GrReducedClip.cpp",
  "//third_party/skia/src/gpu/GrReducedClip.h",
  "//third_party/skia/src/gpu/GrRenderTarget.cpp",
  "//third_party/skia/src/gpu/GrResourceCache.cpp",
  "//third_party/skia/src/gpu/GrResourceCache.h",
  "//third_party/skia/src/gpu/GrResource.cpp",
  "//third_party/skia/src/gpu/GrSoftwarePathRenderer.cpp",
  "//third_party/skia/src/gpu/GrSoftwarePathRenderer.h",
  "//third_party/skia/src/gpu/GrStencilAndCoverPathRenderer.cpp",
  "//third_party/skia/src/gpu/GrStencilAndCoverPathRenderer.h",
  "//third_party/skia/src/gpu/GrStencilBuffer.cpp",
  "//third_party/skia/src/gpu/GrStencilBuffer.h",
  "//third_party/skia/src/gpu/GrStencil.cpp",
  "//third_party/skia/src/gpu/GrStencil.h",
  "//third_party/skia/src/gpu/GrSurface.cpp",
  "//third_party/skia/src/gpu/GrSWMaskHelper.cpp",
  "//third_party/skia/src/gpu/GrSWMaskHelper.h",
  "//third_party/skia/src/gpu/GrTBSearch.h",
  "//third_party/skia/src/gpu/GrTemplates.h",
  "//third_party/skia/src/gpu/GrTextContext.cpp",
  "//third_party/skia/src/gpu/GrTextStrike.cpp",
  "//third_party/skia/src/gpu/GrTextStrike.h",
  "//third_party/skia/src/gpu/GrTextStrike_impl.h",
  "//third_party/skia/src/gpu/GrTextureAccess.cpp",
  "//third_party/skia/src/gpu/GrTexture.cpp",
  "//third_party/skia/src/gpu/GrTHashCache.h",
  "//third_party/skia/src/gpu/gr_unittests.cpp",
  "//third_party/skia/src/gpu/GrVertexBuffer.h",
  "//third_party/skia/src/gpu/SkGpuDevice.cpp",
  "//third_party/skia/src/gpu/SkGr.cpp",
  "//third_party/skia/src/gpu/SkGrFontScaler.cpp",
  "//third_party/skia/src/gpu/SkGrPixelRef.cpp",
  "//third_party/skia/src/gpu/SkGrTexturePixelRef.cpp",
  "//third_party/skia/src/image/SkImage_Gpu.cpp",
  "//third_party/skia/src/image/SkSurface_Gpu.cpp",
]

# TODO(brettw) finish this file.
static_library("skia_library") {
  sources = [
    # this should likely be moved into src/utils in skia
    "//third_party/skia/src/core/SkFlate.cpp",
    # We don"t want to add this to Skia"s core.gypi since it is
    # Android only. Include it here and remove it for everyone
    # but Android later.
    "//third_party/skia/src/core/SkPaintOptionsAndroid.cpp",

    "//third_party/skia/include/images/SkImageRef_GlobalPool.h",
    "//third_party/skia/include/images/SkImageRef.h",
    "//third_party/skia/include/images/SkMovie.h",
    "//third_party/skia/include/images/SkPageFlipper.h",
    "//third_party/skia/include/ports/SkTypeface_win.h",
    "//third_party/skia/include/utils/mac/SkCGUtils.h",
    "//third_party/skia/include/utils/SkDeferredCanvas.h",
    "//third_party/skia/include/utils/SkMatrix44.h",
    "//third_party/skia/include/utils/SkNullCanvas.h",
    "//third_party/skia/include/utils/SkNWayCanvas.h",
    "//third_party/skia/include/utils/SkPictureUtils.h",
    "//third_party/skia/include/utils/SkProxyCanvas.h",
    "//third_party/skia/include/utils/SkRTConf.h",
    "//third_party/skia/src/fonts/SkFontMgr_fontconfig.cpp",
    "//third_party/skia/src/images/SkScaledBitmapSampler.cpp",
    "//third_party/skia/src/images/SkScaledBitmapSampler.h",
    "//third_party/skia/src/opts/opts_check_SSE2.cpp",
    "//third_party/skia/src/ports/SkFontConfigInterface_android.cpp",
    "//third_party/skia/src/ports/SkFontConfigInterface_direct.cpp",
    "//third_party/skia/src/ports/SkFontConfigParser_android.cpp",
    "//third_party/skia/src/ports/SkFontHost_fontconfig.cpp",
    "//third_party/skia/src/ports/SkFontHost_FreeType_common.cpp",
    "//third_party/skia/src/ports/SkFontHost_FreeType_common.h",
    "//third_party/skia/src/ports/SkFontHost_FreeType.cpp",
    "//third_party/skia/src/ports/SkFontHost_mac.cpp",
    "//third_party/skia/src/ports/SkFontHost_win.cpp",
    "//third_party/skia/src/ports/SkFontHost_win_dw.cpp",
    "//third_party/skia/src/ports/SkFontMgr_default_gdi.cpp",
    "//third_party/skia/src/ports/SkGlobalInitialization_chromium.cpp",
    "//third_party/skia/src/ports/SkImageDecoder_empty.cpp",
    "//third_party/skia/src/ports/SkOSFile_posix.cpp",
    "//third_party/skia/src/ports/SkOSFile_stdio.cpp",
    "//third_party/skia/src/ports/SkOSFile_win.cpp",
    "//third_party/skia/src/ports/SkPurgeableMemoryBlock_none.cpp",
    "//third_party/skia/src/ports/SkThread_pthread.cpp",
    "//third_party/skia/src/ports/SkThread_win.cpp",
    "//third_party/skia/src/ports/SkTime_Unix.cpp",
    "//third_party/skia/src/ports/SkTLS_pthread.cpp",
    "//third_party/skia/src/ports/SkTLS_win.cpp",
    "//third_party/skia/src/sfnt/SkOTTable_name.cpp",
    "//third_party/skia/src/sfnt/SkOTTable_name.h",
    "//third_party/skia/src/sfnt/SkOTUtils.cpp",
    "//third_party/skia/src/sfnt/SkOTUtils.h",
    "//third_party/skia/src/utils/debugger/SkDebugCanvas.cpp",
    "//third_party/skia/src/utils/debugger/SkDebugCanvas.h",
    "//third_party/skia/src/utils/debugger/SkDrawCommand.cpp",
    "//third_party/skia/src/utils/debugger/SkDrawCommand.h",
    "//third_party/skia/src/utils/debugger/SkObjectParser.cpp",
    "//third_party/skia/src/utils/debugger/SkObjectParser.h",
    "//third_party/skia/src/utils/mac/SkCreateCGImageRef.cpp",
    "//third_party/skia/src/utils/SkBase64.cpp",
    "//third_party/skia/src/utils/SkBase64.h",
    "//third_party/skia/src/utils/SkBitSet.cpp",
    "//third_party/skia/src/utils/SkBitSet.h",
    "//third_party/skia/src/utils/SkDeferredCanvas.cpp",
    "//third_party/skia/src/utils/SkMatrix44.cpp",
    "//third_party/skia/src/utils/SkNullCanvas.cpp",
    "//third_party/skia/src/utils/SkNWayCanvas.cpp",
    "//third_party/skia/src/utils/SkPictureUtils.cpp",
    "//third_party/skia/src/utils/SkProxyCanvas.cpp",
    "//third_party/skia/src/utils/SkRTConf.cpp",
    "//third_party/skia/src/utils/win/SkDWriteFontFileStream.cpp",
    "//third_party/skia/src/utils/win/SkDWriteFontFileStream.h",
    "//third_party/skia/src/utils/win/SkDWriteGeometrySink.cpp",
    "//third_party/skia/src/utils/win/SkDWriteGeometrySink.h",
    "//third_party/skia/src/utils/win/SkHRESULT.cpp",
  ]

  deps = []

  if (skia_support_gpu) {
    sources += skia_gpu_sources
  }

  if (skia_support_pdf) {
    #deps += "//third_party/sfntly" TODO(brettw)
  } else {
    # TODO(brettw) remove PDF sourcdes.
  }

  configs += ":skia_config"

  defines = [
    #skia_export_defines ???) TODO

    # this flag can be removed entirely once this has baked for a while
    "SK_ALLOW_OVER_32K_BITMAPS",

    # skia uses static initializers to initialize the serialization logic
    # of its "pictures" library. This is currently not used in chrome; if
    # it ever gets used the processes that use it need to call
    # SkGraphics::Init().
    "SK_ALLOW_STATIC_GLOBAL_INITIALIZERS=0",

    # Disable this check because it is too strict for some Chromium-specific
    # subclasses of SkPixelRef. See bug: crbug.com/171776.
    "SK_DISABLE_PIXELREF_LOCKCOUNT_BALANCE_CHECK",

    "IGNORE_ROT_AA_RECT_OPT",

    "SKIA_IGNORE_GPU_MIPMAPS",

    # this flag forces Skia not to use typographic metrics with GDI.
    "SK_GDI_ALWAYS_USE_TEXTMETRICS_FOR_FONT_METRICS",

  ]

  # Settings for text blitting, chosen to approximate the system browser.
  if (is_linux) {
    defines += [
      "SK_GAMMA_EXPONENT=1.2",
      "SK_GAMMA_CONTRAST=0.2",
    ]
  } else if (is_android) {
    defines += [
      "SK_GAMMA_APPLY_TO_A8",
      "SK_GAMMA_EXPONENT=1.4",
      "SK_GAMMA_CONTRAST=0.0",
    ]
  } else if (is_win) {
    defines += [
      "SK_GAMMA_SRGB",
      "SK_GAMMA_CONTRAST=0.5",
    ]
  } else if (is_mac) {
    defines += [
      "SK_GAMMA_SRGB",
      "SK_GAMMA_CONTRAST=0.0",
    ]
  }

  if (!is_ios) {
    # TODO(brettw) blink skia config
    # direct_dependent_configs = [ ... ]
  }

  # [ "target_arch == "arm" and arm_version >= 7 and arm_neon == 1", {
  #   "defines": [
  #     "__ARM_HAVE_NEON",
  #   ],
  # }],
  # [ "target_arch == "arm" and arm_version >= 7 and arm_neon_optional == 1", {
  #   "defines": [
  #     "__ARM_HAVE_OPTIONAL_NEON_SUPPORT",
  #   ],
  # }],
  # [ "OS == "android" and target_arch == "arm"", {
  #   "sources": [
  #     "//third_party/skia/src/core/SkUtilsArm.cpp",
  #   ],
  #   "includes": [
  #     "../build/android/cpufeatures.gypi",
  #   ],
  # }],
  # [ "target_arch == "arm" or target_arch == "mipsel"", {
  #   "sources!": [
  #     "//third_party/skia/src/opts/opts_check_SSE2.cpp"
  #   ],
  # }],
  # [ "use_glib == 1", {
  #   "dependencies": [
  #     "../build/linux/system.gyp:fontconfig",
  #     "../build/linux/system.gyp:freetype2",
  #     "../build/linux/system.gyp:pangocairo",
  #     "//third_party/icu/icu.gyp:icuuc",
  #   ],
  #   "cflags": [
  #     "-Wno-unused",
  #     "-Wno-unused-function",
  #   ],
  # }],
  # [ "use_glib == 0", {
  #   "sources!": [
  #     "//third_party/skia/src/ports/SkFontConfigInterface_direct.cpp",
  #     "//third_party/skia/src/fonts/SkFontMgr_fontconfig.cpp",
  #   ],
  # }],
  # [ "use_glib == 0 and OS != "android"", {
  #   "sources!": [
  #     "//third_party/skia/src/ports/SkFontHost_FreeType.cpp",
  #     "//third_party/skia/src/ports/SkFontHost_FreeType_common.cpp",
  #     "//third_party/skia/src/ports/SkFontHost_fontconfig.cpp",

  #   ],
  # }],
  # [ "OS == "android"", {
  #   "dependencies": [
  #     "//third_party/expat/expat.gyp:expat",
  #     "//third_party/freetype/freetype.gyp:ft2",
  #   ],
  #   # This exports a hard dependency because it needs to run its
  #   # symlink action in order to expose the skia header files.
  #   "hard_dependency": 1,
  #   "include_dirs": [
  #     "//third_party/expat/files/lib",
  #   ],
  # }],
  # [ "OS == "ios"", {
  #   "defines": [
  #     "SK_BUILD_FOR_IOS",
  #     "SK_USE_MAC_CORE_TEXT",
  #   ],
  #   "include_dirs": [
  #     "//third_party/skia/include/utils/ios",
  #     "//third_party/skia/include/utils/mac",
  #   ],
  #   "link_settings": {
  #     "libraries": [
  #       "$(SDKROOT)/System/Library/Frameworks/ImageIO.framework",
  #     ],
  #   },
  #   "sources": [
  #     # This file is used on both iOS and Mac, so it should be removed
  #     #  from the ios and mac conditions and moved into the main sources
  #     #  list.
  #     "//third_party/skia/src/utils/mac/SkStream_mac.cpp",
  #   ],
  #   "sources/": [
  #     ["exclude", "opts_check_SSE2\\.cpp$"],
  #   ],

  includes = []
  if (is_win) {
    includes += [
      "//third_party/skia/include/utils/win",
      "//third_party/skia/src/utils/win",
    ]
  } else {
    sources -= [
      "//third_party/skia/src/ports/SkFontHost_win.cpp",
      "//third_party/skia/src/ports/SkFontHost_win_dw.cpp",
      "//third_party/skia/src/ports/SkFontMgr_default_gdi.cpp",
      "//third_party/skia/src/ports/SkOSFile_win.cpp",
      "//third_party/skia/src/ports/SkThread_win.cpp",
      "//third_party/skia/src/ports/SkTLS_win.cpp",
    ]
  }

  if (!is_posix) {
    sources -= [
      "//third_party/skia/src/ports/SkOSFile_posix.cpp",
      "//third_party/skia/src/ports/SkThread_pthread.cpp",
      "//third_party/skia/src/ports/SkTime_Unix.cpp",
      "//third_party/skia/src/ports/SkTLS_pthread.cpp",
    ]
  }

  # TODO(brettw)
  # if (is_clang) remove -Wstring-conversion

  # Pull in specific Mac files for iOS (which have been filtered out
  # by file name rules).
  #[ "OS == "ios"", {
  #  "sources/": [
  #    ["include", "SkFontHost_mac\\.cpp$",],
  #    ["include", "SkStream_mac\\.cpp$",],
  #    ["include", "SkCreateCGImageRef\\.cpp$",],
  #  ],
  #}],

  if (is_android) {
    defines += [

      # Android devices are typically more memory constrained, so default to a
      # smaller glyph cache (it may be overriden at runtime when the renderer
      # starts up, depending on the actual device memory).
      "SK_DEFAULT_FONT_CACHE_LIMIT=1048576"  # 1024 * 1024
    ]
  } else {
    defines += "SK_DEFAULT_FONT_CACHE_LIMIT=20971520"  # 20 * 1024 * 1024
    sources -= [
      "//third_party/skia/src/ports/SkFontConfigInterface_android.cpp",
      "//third_party/skia/src/ports/SkFontConfigParser_android.cpp",
    ]
  }

  if (is_linux) {
    configs += [
      "//build/config/linux:fontconfig",
      "//build/config/linux:freetype2",
      "//build/config/linux:pangocairo",
    ]
    deps += [
      "//third_party/icu:icuuc",
    ]
  }

  if (!is_mac) {
    sources -= [
      "//third_party/skia/src/ports/SkFontHost_mac.cpp",
    ]
  }
}

static_library("skia_chrome_opts") {
}

