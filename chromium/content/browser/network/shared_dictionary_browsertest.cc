// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "base/base_paths.h"
#include "base/files/file_util.h"
#include "base/metrics/statistics_recorder.h"
#include "base/path_service.h"
#include "base/strings/strcat.h"
#include "base/strings/stringprintf.h"
#include "base/test/scoped_feature_list.h"
#include "base/threading/platform_thread.h"
#include "base/time/time.h"
#include "build/build_config.h"
#include "content/public/browser/clear_site_data_utils.h"
#include "content/public/browser/web_contents.h"
#include "content/public/common/content_features.h"
#include "content/public/test/browser_test.h"
#include "content/public/test/browser_test_utils.h"
#include "content/public/test/content_browser_test.h"
#include "content/public/test/content_browser_test_utils.h"
#include "content/public/test/url_loader_interceptor.h"
#include "content/shell/browser/shell.h"
#include "net/base/url_util.h"
#include "net/dns/mock_host_resolver.h"
#include "net/test/embedded_test_server/embedded_test_server.h"
#include "third_party/blink/public/common/features.h"

namespace content {

namespace {

// Generated by:
//  tools/origin_trials/generate_token.py --version 3 --expire-days 3650 \
//      https://shared-dictionary.test CompressionDictionaryTransport
// Token details:
//  Version: 3
//  Origin: https://shared-dictionary.test:443
//  Is Subdomain: None
//  Is Third Party: None
//  Usage Restriction: None
//  Feature: CompressionDictionaryTransport
//  Expiry: 1999843820 (2033-05-16 08:10:20 UTC)
//  Signature (Base64):
//      rQhlXQ0eRMV/mXUd7hJ3M+kVYMcsH4YKt2Tk6aNuUwKLooNKKLi0cQLrGnTB6sVPV/pryxXV
//      DNJ9HZ1z8KNzCw==
constexpr char kOriginTrialToken[] =
    "A60IZV0NHkTFf5l1He4SdzPpFWDHLB+GCrdk5OmjblMCi6KDSii4tHEC6xp0werFT1f6a8sV1Q"
    "zSfR2dc/CjcwsAAABzeyJvcmlnaW4iOiAiaHR0cHM6Ly9zaGFyZWQtZGljdGlvbmFyeS50ZXN0"
    "OjQ0MyIsICJmZWF0dXJlIjogIkNvbXByZXNzaW9uRGljdGlvbmFyeVRyYW5zcG9ydCIsICJleH"
    "BpcnkiOiAxOTk5ODQzODIwfQ==";

bool WaitForHistogram(const std::string& histogram_name,
                      absl::optional<base::TimeDelta> timeout = absl::nullopt) {
  // Need the polling of histogram because ScopedHistogramSampleObserver doesn't
  // support cross process metrics.
  base::Time start_time = base::Time::Now();
  while (!base::StatisticsRecorder::FindHistogram(histogram_name)) {
    content::FetchHistogramsFromChildProcesses();
    base::PlatformThread::Sleep(base::Milliseconds(5));
    if (timeout && base::Time::Now() > start_time + *timeout) {
      return false;
    }
  }
  return true;
}

enum class FeatureState { kDisabled, kBackendOnly, kFullyEnabled };
enum class BrowserType { kNormal, kOffTheRecord };
enum class FetchType {
  kLinkRelDictionary,
  kFetchApi,
  kFetchApiFromDedicatedWorker,
  kFetchApiFromSharedWorker,
  kFetchApiFromServiceWorker,
};

std::string LinkRelDictionaryScript(const GURL& dictionary_url) {
  return JsReplace(R"(
              (()=>{
                const link = document.createElement('link');
                link.rel = 'dictionary';
                link.href = $1;
                document.body.appendChild(link);
              })();
            )",
                   dictionary_url);
}

std::string FetchDictionaryScript(const GURL& dictionary_url) {
  return JsReplace("fetch($1);", dictionary_url);
}

std::string StartTestDedicatedWorkerScript(const GURL& dictionary_url) {
  return JsReplace(R"(
          (async () => {
            const script = '/shared_dictionary/fetch_dictionary.js';
            const worker = new Worker(script);
            worker.postMessage($1);
          })();
        )",
                   dictionary_url);
}

std::string StartTestSharedWorkerScript(const GURL& dictionary_url) {
  return JsReplace(R"(
          (async () => {
            const script =
                new URL(location).searchParams.has('otworker') ?
                  '/shared_dictionary/fetch_dictionary.js?ot=enabled' :
                  '/shared_dictionary/fetch_dictionary.js';
            const worker = new SharedWorker(script);
            worker.port.start();
            worker.port.postMessage($1);
          })();
        )",
                   dictionary_url);
}

std::string RegisterTestServiceWorkerScript(const GURL& dictionary_url) {
  return JsReplace(R"(
          (async () => {
            const script =
                new URL(location).searchParams.has('otworker') ?
                  '/shared_dictionary/fetch_dictionary.js?ot=enabled' :
                  '/shared_dictionary/fetch_dictionary.js';
            const registration = await navigator.serviceWorker.register(
                script,
                {scope: '/shared_dictionary/'});
            registration.installing.postMessage($1);
          })();
        )",
                   dictionary_url);
}

class SharedDictionaryBrowserTestBase : public ContentBrowserTest {
 public:
  SharedDictionaryBrowserTestBase() = default;
  SharedDictionaryBrowserTestBase(const SharedDictionaryBrowserTestBase&) =
      delete;
  SharedDictionaryBrowserTestBase& operator=(
      const SharedDictionaryBrowserTestBase&) = delete;

 protected:
  int64_t GetTestDataFileSize(const std::string& name) {
    base::FilePath file_path;
    CHECK(base::PathService::Get(base::DIR_SOURCE_ROOT, &file_path));
    int64_t file_size = 0;
    {
      base::ScopedAllowBlockingForTesting allow_blocking;
      CHECK(base::GetFileSize(
          file_path.Append(GetTestDataFilePath()).AppendASCII(name),
          &file_size));
    }
    return file_size;
  }
  std::string GetTestDataFile(const std::string& name) {
    base::FilePath file_path;
    CHECK(base::PathService::Get(base::DIR_SOURCE_ROOT, &file_path));
    std::string contents;
    {
      base::ScopedAllowBlockingForTesting allow_blocking;
      CHECK(base::ReadFileToString(
          file_path.Append(GetTestDataFilePath()).AppendASCII(name),
          &contents));
    }
    return contents;
  }

  void RunWriteDictionaryTest(Shell* shell,
                              FetchType fetch_type,
                              const GURL& page_url,
                              const GURL& dictionary_url,
                              const std::string& histogram_name,
                              bool expect_success) {
    EXPECT_TRUE(NavigateToURL(shell, page_url));
    base::HistogramTester histogram_tester;
    std::string script;
    switch (fetch_type) {
      case FetchType::kLinkRelDictionary:
        script = LinkRelDictionaryScript(dictionary_url);
        break;
      case FetchType::kFetchApi:
        script = FetchDictionaryScript(dictionary_url);
        break;
      case FetchType::kFetchApiFromDedicatedWorker:
        script = StartTestDedicatedWorkerScript(dictionary_url);
        break;
      case FetchType::kFetchApiFromSharedWorker:
        script = StartTestSharedWorkerScript(dictionary_url);
        break;
      case FetchType::kFetchApiFromServiceWorker:
        script = RegisterTestServiceWorkerScript(dictionary_url);
        break;
    }
    EXPECT_TRUE(ExecJs(shell->web_contents()->GetPrimaryMainFrame(), script));

    if (!expect_success) {
      EXPECT_FALSE(WaitForHistogram(histogram_name, base::Milliseconds(100)));
      return;
    }
    EXPECT_TRUE(WaitForHistogram(histogram_name));
    histogram_tester.ExpectBucketCount(
        histogram_name, GetTestDataFileSize("shared_dictionary/test.dict"),
        /*expected_count=*/1);
  }
};

// Tests end to end functionality of "compression dictionary transport" feature
// with FeatureState of params.
// TODO(crbug.com/1413922): Remove this when we fully launch this feature.
class SharedDictionaryFeatureStateBrowserTest
    : public SharedDictionaryBrowserTestBase,
      public ::testing::WithParamInterface<FeatureState> {
 public:
  SharedDictionaryFeatureStateBrowserTest() {
    std::vector<base::test::FeatureRef> enabled_features;
    switch (GetFeatureState()) {
      case FeatureState::kDisabled:
        break;
      case FeatureState::kBackendOnly:
        enabled_features.emplace_back(
            blink::features::kCompressionDictionaryTransportBackend);
        break;
      case FeatureState::kFullyEnabled:
        enabled_features.emplace_back(
            blink::features::kCompressionDictionaryTransportBackend);
        enabled_features.emplace_back(
            blink::features::kCompressionDictionaryTransport);
        break;
    }
    scoped_feature_list_.InitWithFeatures(enabled_features,
                                          /*disabled_features=*/{});
  }
  SharedDictionaryFeatureStateBrowserTest(
      const SharedDictionaryFeatureStateBrowserTest&) = delete;
  SharedDictionaryFeatureStateBrowserTest& operator=(
      const SharedDictionaryFeatureStateBrowserTest&) = delete;

  // ContentBrowserTest implementation:
  void SetUpOnMainThread() override {
    https_server_ = std::make_unique<net::EmbeddedTestServer>(
        net::test_server::EmbeddedTestServer::TYPE_HTTPS);
    https_server_->AddDefaultHandlers(GetTestDataFilePath());
    ASSERT_TRUE(https_server_->Start());
    SharedDictionaryBrowserTestBase::SetUpOnMainThread();

    // Need to use URLLoaderInterceptor to test the behavior of Origin Trial.
    url_loader_interceptor_.emplace(base::BindRepeating(
        &SharedDictionaryFeatureStateBrowserTest::InterceptRequest,
        GetTestDataFile("shared_dictionary/blank.html"),
        GetTestDataFile("shared_dictionary/fetch_dictionary.js")));
  }

  void TearDownOnMainThread() override { url_loader_interceptor_.reset(); }

 protected:
  FeatureState GetFeatureState() const { return GetParam(); }
  net::EmbeddedTestServer* https_server() { return https_server_.get(); }

 private:
  // URLLoaderInterceptor callback
  static bool InterceptRequest(const std::string& blink_html_content,
                               const std::string& fetch_dictionary_js_content,
                               URLLoaderInterceptor::RequestParams* params) {
    // Find the appropriate origin trial token.
    base::StringPiece origin_trial_token;
    std::string origin_trial_query_param;
    if (net::GetValueForKeyInQuery(params->url_request.url, "ot",
                                   &origin_trial_query_param)) {
      if (origin_trial_query_param == "enabled") {
        origin_trial_token = kOriginTrialToken;
      }
    }

    if (params->url_request.url.path() == "/blank.html") {
      InterceptBlankPageRequest(params, origin_trial_token, blink_html_content);
      return true;
    } else if (params->url_request.url.path() ==
               "/shared_dictionary/fetch_dictionary.js") {
      InterceptFetchDictionaryScriptRequest(params, origin_trial_token,
                                            fetch_dictionary_js_content);
      return true;
    }
    return false;
  }

  static void InterceptBlankPageRequest(
      URLLoaderInterceptor::RequestParams* params,
      base::StringPiece origin_trial_token,
      const std::string& content) {
    // Construct and send the response.
    std::string headers =
        "HTTP/1.1 200 OK\nContent-Type: text/html; charset=utf-8\n";
    if (!origin_trial_token.empty()) {
      base::StrAppend(&headers, {"Origin-Trial: ", origin_trial_token, "\n"});
    }
    headers += '\n';
    URLLoaderInterceptor::WriteResponse(headers, content, params->client.get(),
                                        /*ssl_info=*/absl::nullopt,
                                        params->url_request.url);
  }

  static void InterceptFetchDictionaryScriptRequest(
      URLLoaderInterceptor::RequestParams* params,
      base::StringPiece origin_trial_token,
      const std::string& content) {
    // Construct and send the response.
    std::string headers =
        "HTTP/1.1 200 OK\nContent-Type: application/javascript; "
        "charset=utf-8\n";
    if (!origin_trial_token.empty()) {
      base::StrAppend(&headers, {"Origin-Trial: ", origin_trial_token, "\n"});
    }
    headers += '\n';
    URLLoaderInterceptor::WriteResponse(headers, content, params->client.get(),
                                        /*ssl_info=*/absl::nullopt,
                                        params->url_request.url);
  }

  std::unique_ptr<net::EmbeddedTestServer> https_server_;
  base::test::ScopedFeatureList scoped_feature_list_;
  absl::optional<URLLoaderInterceptor> url_loader_interceptor_;
};

INSTANTIATE_TEST_SUITE_P(All,
                         SharedDictionaryFeatureStateBrowserTest,
                         testing::Values(FeatureState::kDisabled,
                                         FeatureState::kBackendOnly,
                                         FeatureState::kFullyEnabled),
                         [](const testing::TestParamInfo<FeatureState>& info) {
                           switch (info.param) {
                             case FeatureState::kDisabled:
                               return "Disabled";
                             case FeatureState::kBackendOnly:
                               return "BackendOnly";
                             case FeatureState::kFullyEnabled:
                               return "FullyEnabled";
                           }
                         });

IN_PROC_BROWSER_TEST_P(SharedDictionaryFeatureStateBrowserTest,
                       LinkRelDictionary) {
  RunWriteDictionaryTest(
      shell(), FetchType::kLinkRelDictionary,
      GURL("https://shared-dictionary.test/blank.html"),
      https_server()->GetURL("/shared_dictionary/test.dict"),
      "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB",
      /*expect_success=*/GetFeatureState() == FeatureState::kFullyEnabled);
}

IN_PROC_BROWSER_TEST_P(SharedDictionaryFeatureStateBrowserTest,
                       LinkRelDictionaryWithOriginTrial) {
  RunWriteDictionaryTest(
      shell(), FetchType::kLinkRelDictionary,
      GURL("https://shared-dictionary.test/blank.html?ot=enabled"),
      https_server()->GetURL("/shared_dictionary/test.dict"),
      "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB",
      /*expect_success=*/GetFeatureState() != FeatureState::kDisabled);
}

IN_PROC_BROWSER_TEST_P(SharedDictionaryFeatureStateBrowserTest, FetchApi) {
  RunWriteDictionaryTest(
      shell(), FetchType::kFetchApi,
      GURL("https://shared-dictionary.test/blank.html"),
      https_server()->GetURL("/shared_dictionary/test.dict"),
      "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB",
      /*expect_success=*/GetFeatureState() == FeatureState::kFullyEnabled);
}

IN_PROC_BROWSER_TEST_P(SharedDictionaryFeatureStateBrowserTest,
                       FetchApiWithOriginTrial) {
  RunWriteDictionaryTest(
      shell(), FetchType::kFetchApi,
      GURL("https://shared-dictionary.test/blank.html?ot=enabled"),
      https_server()->GetURL("/shared_dictionary/test.dict"),
      "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB",
      /*expect_success=*/GetFeatureState() != FeatureState::kDisabled);
}

IN_PROC_BROWSER_TEST_P(SharedDictionaryFeatureStateBrowserTest,
                       FetchApiFromDedicatedWorker) {
  RunWriteDictionaryTest(
      shell(), FetchType::kFetchApiFromDedicatedWorker,
      GURL("https://shared-dictionary.test/blank.html"),
      https_server()->GetURL("/shared_dictionary/test.dict"),
      "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB",
      /*expect_success=*/GetFeatureState() == FeatureState::kFullyEnabled);
}

IN_PROC_BROWSER_TEST_P(SharedDictionaryFeatureStateBrowserTest,
                       FetchApiFromDedicatedWorkerWithOriginTrial) {
  RunWriteDictionaryTest(
      shell(), FetchType::kFetchApiFromDedicatedWorker,
      GURL("https://shared-dictionary.test/blank.html?ot=enabled"),
      https_server()->GetURL("/shared_dictionary/test.dict"),
      "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB",
      /*expect_success=*/GetFeatureState() != FeatureState::kDisabled);
}

#if !BUILDFLAG(IS_ANDROID)
// Shared workers are not supported on Android.
IN_PROC_BROWSER_TEST_P(SharedDictionaryFeatureStateBrowserTest,
                       FetchApiFromSharedWorker) {
  RunWriteDictionaryTest(
      shell(), FetchType::kFetchApiFromSharedWorker,
      GURL("https://shared-dictionary.test/blank.html"),
      https_server()->GetURL("/shared_dictionary/test.dict"),
      "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB",
      /*expect_success=*/GetFeatureState() == FeatureState::kFullyEnabled);
}

IN_PROC_BROWSER_TEST_P(SharedDictionaryFeatureStateBrowserTest,
                       FetchApiFromSharedWorkerWithOriginTrial) {
  RunWriteDictionaryTest(
      shell(), FetchType::kFetchApiFromSharedWorker,
      GURL("https://shared-dictionary.test/blank.html?otworker"),
      https_server()->GetURL("/shared_dictionary/test.dict"),
      "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB",
      /*expect_success=*/GetFeatureState() != FeatureState::kDisabled);
}
#endif  // !BUILDFLAG(IS_ANDROID)

IN_PROC_BROWSER_TEST_P(SharedDictionaryFeatureStateBrowserTest,
                       FetchApiFromServiceWorker) {
  RunWriteDictionaryTest(
      shell(), FetchType::kFetchApiFromServiceWorker,
      GURL("https://shared-dictionary.test/blank.html"),
      https_server()->GetURL("/shared_dictionary/test.dict"),
      "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB",
      /*expect_success=*/GetFeatureState() == FeatureState::kFullyEnabled);
}

IN_PROC_BROWSER_TEST_P(SharedDictionaryFeatureStateBrowserTest,
                       FetchApiFromServiceWorkerWithOriginTrial) {
  RunWriteDictionaryTest(
      shell(), FetchType::kFetchApiFromServiceWorker,
      GURL("https://shared-dictionary.test/blank.html?otworker"),
      https_server()->GetURL("/shared_dictionary/test.dict"),
      "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB",
      /*expect_success=*/GetFeatureState() != FeatureState::kDisabled);
}

// Tests end to end functionality of "compression dictionary transport" feature
// with fully enabled features.
class SharedDictionaryBrowserTest
    : public SharedDictionaryBrowserTestBase,
      public ::testing::WithParamInterface<BrowserType> {
 public:
  SharedDictionaryBrowserTest() {
    scoped_feature_list_.InitWithFeatures(
        /*enabled_features=*/{blink::features::
                                  kCompressionDictionaryTransportBackend,
                              blink::features::kCompressionDictionaryTransport},
        /*disabled_features=*/{});
  }
  SharedDictionaryBrowserTest(const SharedDictionaryBrowserTest&) = delete;
  SharedDictionaryBrowserTest& operator=(const SharedDictionaryBrowserTest&) =
      delete;

  // ContentBrowserTest implementation:
  void SetUpOnMainThread() override {
    ASSERT_TRUE(embedded_test_server()->Start());
    host_resolver()->AddRule("*", "127.0.0.1");
  }

 protected:
  BrowserType GetBrowserType() const { return GetParam(); }

 private:
  base::test::ScopedFeatureList scoped_feature_list_;
};

INSTANTIATE_TEST_SUITE_P(All,
                         SharedDictionaryBrowserTest,
                         testing::Values(BrowserType::kNormal,
                                         BrowserType::kOffTheRecord),
                         [](const testing::TestParamInfo<BrowserType>& info) {
                           switch (info.param) {
                             case BrowserType::kNormal:
                               return "Normal";
                             case BrowserType::kOffTheRecord:
                               return "OffTheRecord";
                           }
                         });

IN_PROC_BROWSER_TEST_P(SharedDictionaryBrowserTest,
                       LinkRelDictionarySecureContext) {
  // http://127.0.0.1:PORT/ is secure context, so the dictionary should be
  // written.
  RunWriteDictionaryTest(
      GetBrowserType() == BrowserType::kNormal ? shell()
                                               : CreateOffTheRecordBrowser(),
      FetchType::kLinkRelDictionary,
      embedded_test_server()->GetURL("/shared_dictionary/blank.html"),
      embedded_test_server()->GetURL("/shared_dictionary/test.dict"),
      GetBrowserType() == BrowserType::kNormal
          ? "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB"
          : "Net.SharedDictionaryWriterInMemory.DictionarySize",
      /*expect_success=*/true);
}

IN_PROC_BROWSER_TEST_P(SharedDictionaryBrowserTest,
                       FetchDictionarySecureContext) {
  // http://127.0.0.1:PORT/ is secure context, so the dictionary should be
  // written.
  RunWriteDictionaryTest(
      GetBrowserType() == BrowserType::kNormal ? shell()
                                               : CreateOffTheRecordBrowser(),
      FetchType::kFetchApi,
      embedded_test_server()->GetURL("/shared_dictionary/blank.html"),
      embedded_test_server()->GetURL("/shared_dictionary/test.dict"),
      GetBrowserType() == BrowserType::kNormal
          ? "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB"
          : "Net.SharedDictionaryWriterInMemory.DictionarySize",
      /*expect_success=*/true);
}

IN_PROC_BROWSER_TEST_P(SharedDictionaryBrowserTest,
                       LinkRelDictionaryInsecureContext) {
  // http://www.test/ is insecure context, so the dictionary should not be
  // written.
  RunWriteDictionaryTest(
      GetBrowserType() == BrowserType::kNormal ? shell()
                                               : CreateOffTheRecordBrowser(),
      FetchType::kLinkRelDictionary,
      embedded_test_server()->GetURL("www.test",
                                     "/shared_dictionary/blank.html"),
      embedded_test_server()->GetURL("www.test",
                                     "/shared_dictionary/test.dict"),
      GetBrowserType() == BrowserType::kNormal
          ? "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB"
          : "Net.SharedDictionaryWriterInMemory.DictionarySize",
      /*expect_success=*/false);
}

IN_PROC_BROWSER_TEST_P(SharedDictionaryBrowserTest,
                       FetchDictionaryInsecureContext) {
  // http://www.test/ is insecure context, so the dictionary should not be
  // written.
  RunWriteDictionaryTest(
      GetBrowserType() == BrowserType::kNormal ? shell()
                                               : CreateOffTheRecordBrowser(),
      FetchType::kFetchApi,
      embedded_test_server()->GetURL("www.test",
                                     "/shared_dictionary/blank.html"),
      embedded_test_server()->GetURL("www.test",
                                     "/shared_dictionary/test.dict"),
      GetBrowserType() == BrowserType::kNormal
          ? "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB"
          : "Net.SharedDictionaryWriterInMemory.DictionarySize",
      /*expect_success=*/false);
}

IN_PROC_BROWSER_TEST_P(SharedDictionaryBrowserTest,
                       FetchDictionaryFromDedicatedWorker) {
  RunWriteDictionaryTest(
      GetBrowserType() == BrowserType::kNormal ? shell()
                                               : CreateOffTheRecordBrowser(),
      FetchType::kFetchApiFromDedicatedWorker,
      embedded_test_server()->GetURL("/shared_dictionary/blank.html"),
      embedded_test_server()->GetURL("/shared_dictionary/test.dict"),
      GetBrowserType() == BrowserType::kNormal
          ? "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB"
          : "Net.SharedDictionaryWriterInMemory.DictionarySize",
      /*expect_success=*/true);
}

#if !BUILDFLAG(IS_ANDROID)
// Shared workers are not supported on Android.
IN_PROC_BROWSER_TEST_P(SharedDictionaryBrowserTest,
                       FetchDictionaryFromSharedWorker) {
  RunWriteDictionaryTest(
      GetBrowserType() == BrowserType::kNormal ? shell()
                                               : CreateOffTheRecordBrowser(),
      FetchType::kFetchApiFromSharedWorker,
      embedded_test_server()->GetURL("/shared_dictionary/blank.html"),
      embedded_test_server()->GetURL("/shared_dictionary/test.dict"),
      GetBrowserType() == BrowserType::kNormal
          ? "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB"
          : "Net.SharedDictionaryWriterInMemory.DictionarySize",
      /*expect_success=*/true);
}
#endif  // !BUILDFLAG(IS_ANDROID)

IN_PROC_BROWSER_TEST_P(SharedDictionaryBrowserTest,
                       FetchDictionaryFromServiceWorker) {
  RunWriteDictionaryTest(
      GetBrowserType() == BrowserType::kNormal ? shell()
                                               : CreateOffTheRecordBrowser(),
      FetchType::kFetchApiFromServiceWorker,
      embedded_test_server()->GetURL("/shared_dictionary/blank.html"),
      embedded_test_server()->GetURL("/shared_dictionary/test.dict"),
      GetBrowserType() == BrowserType::kNormal
          ? "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB"
          : "Net.SharedDictionaryWriterInMemory.DictionarySize",
      /*expect_success=*/true);
}

IN_PROC_BROWSER_TEST_P(SharedDictionaryBrowserTest, ClearSiteData) {
  Shell* target_shell = GetBrowserType() == BrowserType::kNormal
                            ? shell()
                            : CreateOffTheRecordBrowser();
  RunWriteDictionaryTest(
      target_shell, FetchType::kLinkRelDictionary,
      embedded_test_server()->GetURL("/shared_dictionary/blank.html"),
      embedded_test_server()->GetURL("/shared_dictionary/test.dict"),
      GetBrowserType() == BrowserType::kNormal
          ? "Net.SharedDictionaryManagerOnDisk.DictionarySizeKB"
          : "Net.SharedDictionaryWriterInMemory.DictionarySize",
      /*expect_success=*/true);

  base::RunLoop loop;
  content::ClearSiteData(
      /*browser_context_getter=*/base::BindRepeating(
          [](content::BrowserContext* browser_context) {
            return browser_context;
          },
          base::Unretained(target_shell->web_contents()->GetBrowserContext())),
      /*origin=*/url::Origin::Create(embedded_test_server()->GetURL("/")),
      /*clear_cookies=*/true, /*clear_storage=*/false,
      /*clear_cache=*/true,
      /*storage_buckets_to_remove=*/{},
      /*avoid_closing_connections=*/true,
      /*cookie_partition_key=*/absl::nullopt,
      /*storage_key=*/absl::nullopt,
      /*partitioned_state_allowed_only=*/false,
      /*callback=*/loop.QuitClosure());
  loop.Run();

  // TODO(crbug.com/1413922): Check that the dicitionary has been deleted when
  // we implement shared dictionary decompression logic in network fetch.
}

}  // namespace

}  // namespace content
